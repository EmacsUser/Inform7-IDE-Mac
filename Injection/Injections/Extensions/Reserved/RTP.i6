! RTP.i6 segment
! Reporting of run-time problems in a format which can be parsed by the
! Inform application

Global I7_enable_rte = true;

Constant RTP_BACKDROP 1;
Constant RTP_EXITDOOR 2;
Constant RTP_NOEXIT 3;
Constant RTP_CANTCHANGE 4;
Constant RTP_IMPREL 5;
Constant RTP_RULESTACK 6;
Constant RTP_TOOMANYRULEBOOKS 7;
Constant RTP_TOOMANYEVENTS 8;
Constant RTP_BADPROPERTY 9;
Constant RTP_UNPROVIDED 10;
Constant RTP_UNSET 11;
Constant RTP_TOOMANYACTS 12;
Constant RTP_CANTABANDON 13;
Constant RTP_CANTEND 14;
Constant RTP_CANTMOVENOTHING 15;
Constant RTP_CANTREMOVENOTHING 16;
Constant RTP_DIVZERO 17;
Constant RTP_BADVALUEPROPERTY 18;
Constant RTP_NOTBACKDROP 19;
Constant RTP_TABLE_NOCOL 20;
Constant RTP_TABLE_NOCORR 21;
Constant RTP_TABLE_NOROW 22;
Constant RTP_TABLE_NOENTRY 23;
Constant RTP_TABLE_NOTABLE 24;
Constant RTP_TABLE_NOMOREBLANKS 25;
Constant RTP_TABLE_NOROWS 26;
Constant RTP_TABLE_CANTSORT 27;
Constant RTP_NOTINAROOM 28;
Constant RTP_BADTOPIC 29;
Constant RTP_ROUTELESS 30;
Constant RTP_PROPOFNOTHING 31;
Constant RTP_DECIDEONWRONGKIND 32;
Constant RTP_DECIDEONNOTHING 33;

[ RunTimeProblem n obj obj2 ln obj3 i c;
	! if (I7_enable_rte == false) return;
	I7_enable_rte = false;
	print "^*** Run-time problem P", n;
	! if (ln == 0) ln=1;
	if (ln) print " (at paragraph ", ln, " in the source text)";
	print ": ";
	switch(n) {
		RTP_BACKDROP:
			print "Tried to move ", (the) obj, " (a backdrop) to ", (the) obj2,
				", which is not a region.^";
		RTP_CANTCHANGE:
			print "Tried to change player to ", (the) obj,
				", which is not a player-character.^";
		RTP_NOEXIT:
		    print "Tried to change ", (the) obj2, " exit of ", (the) obj,
		    	", but it didn't seem to have such an exit to change.^";
		RTP_EXITDOOR:
		    print "Tried to change ", (the) obj2, " exit of ", (the) obj,
		    	", but it led to a door, not a room.^";
		RTP_IMPREL:
			print "Tried to access an inappropriate relation for ", (the) obj,
				", violating '";
			for (i=0: RelationList-->i ~= I6_NULL: i=i+3) {
				c = RelationList-->(i+1);
				if (((c == Relation_VtoV) || (c == Relation_Sym_VtoV))
					&& (obj2 == RelationList-->i)) {
					print (string) RelationList-->(i+2), "'.^";
				}
			}
		RTP_RULESTACK:
			print "Too many procedural rules acting all at once.^";
		RTP_TOOMANYRULEBOOKS:
			print "Too many rulebooks in simultaneous use.^";
		RTP_TOOMANYEVENTS:
			print "Too many timed events are going on at once.^";
		RTP_BADPROPERTY:
			print "Tried to access non-existent property for ", (the) obj, ".^";
		RTP_UNPROVIDED:
			print "Since ", (the) obj, " is not allowed the property ~",
					(string) obj2, "~, it is against the rules to try to use it.^";
		RTP_UNSET:
			print "Although ", (the) obj, " is allowed to have the property ~",
				(string) obj2, "~, no value was ever given, so it can't now be used.^";
		RTP_TOOMANYACTS:
			print "Too many activities are going on at once.^";
		RTP_CANTABANDON:
			print "Tried to abandon an activity which wasn't going on.^";
		RTP_CANTEND:
			print "Tried to end an activity which wasn't going on.^";
		RTP_CANTMOVENOTHING:
			print "You can't move nothing.^";
		RTP_CANTREMOVENOTHING:
			print "You can't remove nothing from play.^";
		RTP_DIVZERO:
			print "You can't divide by zero.^";
		RTP_BADVALUEPROPERTY:
			print "Tried to access property for a value which didn't fit: ",
				"if this were a number it would be ", obj, ".^";
		RTP_NOTBACKDROP:
			print "Tried to move ", (the) obj, " (not a backdrop) to ", (the) obj2,
				", which is a region.^";
		RTP_TABLE_NOCOL:
			print "Attempt to look up a non-existent column in the table '",
				(PrintTableName) obj, "'.^";
		RTP_TABLE_NOCORR:
			print "Attempt to look up a non-existent correspondence in the table '",
				(PrintTableName) obj, "'.^";
		RTP_TABLE_NOROW:
			print "Attempt to look up a non-existent row in the table '",
				(PrintTableName) obj, "'.^";
		RTP_TABLE_NOENTRY:
			print "Attempt to look up a non-existent entry at column ", obj2,
				", row ", obj3, " of the table '", (PrintTableName) obj, "'.^";
		RTP_TABLE_NOTABLE:
			print "Attempt to blank out a row from a non-existent table (value ",
				obj, ").^";
		RTP_TABLE_NOMOREBLANKS:
			print "Attempt to choose a blank row in a table with none left: table '",
				(PrintTableName) obj, "'.^";
		RTP_TABLE_NOROWS:
			print "Attempt to choose a random row in an entirely blank table: table '",
				(PrintTableName) obj, "'.^";
		RTP_TABLE_CANTSORT:
			print "Attempt to sort a table whose ordering must remain fixed: table '",
				(PrintTableName) obj, "'.^";
		RTP_NOTINAROOM:
			print "Attempt to test if the current location is '",
				(the) obj, "', which is not a room or region.^";
		RTP_BADTOPIC:
			print "Attempt to see if a snippet of text matches something which
				is not a topic.^";
		RTP_ROUTELESS:
			print "Attempt to find route or count steps through an implicit
				relation.^";
		RTP_PROPOFNOTHING:
			print "Attempt to use a property of the 'nothing' non-object.^";
		RTP_DECIDEONWRONGKIND:
			print "Attempt to 'decide on V' where V is the wrong kind of object.^";
		RTP_DECIDEONNOTHING:
			print "Attempt to 'decide on nothing'.^";
		}
	print "^";
];

! Protected Z-machine division routines:

[ I7_Divide A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A/B;
];

[ I7_Rem A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A%B;
];

! Checked return values:

[ I7_VerifyK V K;
	if (V ofclass K) return V;
	if (v == nothing) RunTimeProblem(RTP_DECIDEONNOTHING);
	else RunTimeProblem(RTP_DECIDEONWRONGKIND);
	return V;
];

! Protected Z-machine property and attribute access:

[ I7_Provides o either_or p;
	return HypotheticalProperty(either_or, o, p);
];

[ I7GetEitherOr o p;
	if (o == nothing) rfalse;
	if (p<0) p = ~p;
	if (p<I7_FBNA) {
		if (o has p) rtrue;
		rfalse;
	}
	if ((o provides p) && (o.p)) rtrue;
	rfalse;
];
[ I7SetEitherOr o p negate;
	if (p<0) { p = ~p; negate = ~negate; }
	if (negate) {
		if (PermitAttribute(true, o, p)) {
			if (p<I7_FBNA) give o ~p; else o.p = false;
		}
		return;
	}
	if (PermitAttribute(true, o, p)) {
		if (p<I7_FBNA) give o p; else o.p = true;
	}
];
[ PermitAttributeR obj off i;
	! print "Asking permission of ", (the) obj, "^";
	i=off; while (property_metadata-->i >= 0) {
	if (obj == property_metadata-->i) rtrue; i++; }
	rfalse;
];
[ HypotheticalProperty f obj att off textual i a l; if (att<0) att = ~att;
	if (metaclass(obj) ~= Object) rfalse;
	if (f) {
		if (att < I7_FBNA) off = attribute_offsets-->att;
		else off = attribute_offsets-->(50+att-I7_FBNA);
	} else off = property_offsets-->att;
	if (off<0) rfalse;
	textual = property_metadata-->off; off++;
	if (PermitAttributeR(obj, off)) jump Okay;
	if (obj provides i7_kind) { l = (obj.#i7_kind)/2; a = obj.&i7_kind;
	for (i=0: i<l: i++) if (PermitAttributeR(a-->i, off)) jump Okay; }
	rfalse;
	.Okay; if (f) rtrue;
	if (obj provides att) rtrue;
	rfalse;
];
[ PermitAttribute f obj att off textual i a l; if (att<0) att = ~att;
	if (metaclass(obj) ~= Object) rfalse;
	if (f) {
		if (att < I7_FBNA) off = attribute_offsets-->att;
		else off = attribute_offsets-->(50+att-I7_FBNA);
	} else off = property_offsets-->att;
! print "Off is ", off, "^";
! for (i=0: i<116: i++) print attribute_offsets-->i, ", ";
! print "^^Props: ";
! for (i=0: i<166: i++) print property_offsets-->i, ", ";
! print "^";
	if (off<0) return RunTimeProblem(RTP_BADPROPERTY, obj);
	textual = property_metadata-->off; off++;
	if (PermitAttributeR(obj, off)) jump Okay;
	if (obj provides i7_kind) { l = (obj.#i7_kind)/2; a = obj.&i7_kind;
	for (i=0: i<l: i++) if (PermitAttributeR(a-->i, off)) jump Okay; }
	RunTimeProblem(RTP_UNPROVIDED, obj, textual);
	rfalse;
	.Okay; if (f) rtrue;
	if (obj provides att) rtrue;
	RunTimeProblem(RTP_UNSET, obj, textual);
	rfalse;
];
[ AccessProp obj pr;
	if (Value_Property_Holder provides pr) {
		if ((obj<=0) || (obj > (Value_Property_Holder.pr)-->0)) {
			RunTimeProblem(RTP_BADVALUEPROPERTY);
			rfalse;
		}
		return (Value_Property_Holder.pr)-->(obj+1);
	}
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if ((pr == door_to) && (obj provides pr)) return obj.pr();
	if (PermitAttribute(false, obj, pr)) return obj.pr;
	rfalse;
];
[ WriteAccessProp obj pr val;
	if (Value_Property_Holder provides pr) {
		if ((obj<=0) || (obj > (Value_Property_Holder.pr)-->0))
			return RunTimeProblem(RTP_BADVALUEPROPERTY);
		(Value_Property_Holder.pr)-->(obj+1) = val;
		return;
	}
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if (PermitAttribute(false, obj, pr)) obj.pr = val;
];

! Type checking failing at run-time

[ Runtime_Type_Error file line arg;
	print ">--> A mistake in the source (~", (string) file,
		"~, line ", line, ") meant that argument ", arg,
		" had the wrong type.^";
];

! End of RTP.i6 segment
