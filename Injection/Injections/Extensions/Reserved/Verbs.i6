! Verbs.i6 segment

[ AllowPushDir i oldrm newrm infl;
	if ((noun ofclass K2_thing) && (noun hasnt pushable))
		return L__M(##PushDir,1,noun);
	if (parent(second)~=compass) return L__M(##PushDir,2,noun);
	if (second==u_obj or d_obj)  return L__M(##PushDir,3,noun);
	AfterRoutines(); i=noun;
	if (actor notin noun) { move i to actor; infl = true; }
	move_pushing = i;
	oldrm = I7_RoomOf(noun);
	<Go second>;
	newrm = I7_RoomOf(actor);
	move_pushing = nothing; move i to newrm;
	if (newrm ~= oldrm) {
		if (IndirectHolder(i, player)) I7_TryAction(0, player, ##Look, 0, 0);
		RulebookSucceeds();
	} else RulebookFails();
];

Global GVS_converted = -1;
[ GVS_Convert ac n s;
	GVS_converted = InformLibrary.begin_action(ac, n, s);
	rtrue;
];
[ GenericVerbSub ch co re any vis rv;
	@push GVS_converted;
	GVS_converted = -1;
	if (actor ~= player) {
		if (act_requester) {
			act_requester = nothing;
			if (ActionPrimitive() == false) {
				if (ProcessRulebook(UNABLE_RB) == false) {
					print (The) actor, " ", (IsOrAre) actor, " unable to do that.^^";
				}
		  }
			jump HappyEnding;
		}
		vis = I7_CanSee(player, actor);
		if ((noun ofclass K2_thing) && (~~(noun ofclass K7_backdrop)))
			vis = vis || (I7_CanSee(player, noun));
		if ((second ofclass K2_thing) && (~~(second ofclass K7_backdrop)))
			vis = vis || (I7_CanSee(player, second));
		if (rv=ProcessRulebook(GENERIC_CHECK_RB)) jump FailsUnlessConverted;
		if (any && (rv=ProcessRulebook(ch))) jump FailsUnlessConverted;
		if (ProcessRulebook(GENERIC_CARRYOUT_RB) == 0)
			if (any) ProcessRulebook(co);
		if (rv=ProcessRulebook(AFTER_RB)) jump HappyEnding;
		vis = vis || (I7_CanSee(player, actor));
		if ((noun ofclass K2_thing) && (~~(noun ofclass K7_backdrop)))
			vis = vis || (I7_CanSee(player, noun));
		if ((second ofclass K2_thing) && (~~(second ofclass K7_backdrop)))
			vis = vis || (I7_CanSee(player, second));
		if (keep_silent || (vis==false)) jump HappyEnding;
		if (rv=ProcessRulebook(GENERIC_REPORT_RB)) jump HappyEnding;
		if (any) rv=ProcessRulebook(re);
		jump HappyEnding;
	}
	if ((rv=ProcessRulebook(GENERIC_CHECK_RB)) || (rv=ProcessRulebook(ch)))
		jump FailsUnlessConverted;
	if (ProcessRulebook(GENERIC_CARRYOUT_RB) == 0) ProcessRulebook(co);
	if (meta) say__p = 0;
	if (rv=ProcessRulebook(AFTER_RB)) jump HappyEnding;
	if (keep_silent) jump HappyEnding;
	if (rv=ProcessRulebook(GENERIC_REPORT_RB)) jump HappyEnding;
	rv=ProcessRulebook(re);
	.HappyEnding;
	ActRulebookSucceeds(rv);
	@pull GVS_converted;
	rtrue;
	.FailsUnlessConverted;
	if (GVS_converted == 1) jump HappyEnding;
	ActRulebookFails(rv);
	@pull GVS_converted;
	rtrue;
];

[ GL__M a b c; if ((actor ~= player) || (untouchable_silence)) rtrue;
	return L__M(a,b,c); ];
[ HisHerTheir o; if (o has pluralname) { print "their"; return; }
	if (o has female) { print "her"; return; }
	print "his"; ];

! Object movements

Global ac_common_ancestor;
Global take_after_recipient;
[ TakeSub_C1;
	if (onotheld_mode==1 && noun in actor) {
		RulebookSucceeds(); rtrue; } rfalse; ];
[ TakeSub_C2;
	if (noun == actor) return GL__M(##Take,2); rfalse; ];
[ TakeSub_C3;
	if (noun has animate) return GL__M(##Take,3,noun); rfalse; ];
[ TakeSub_C4 i;
!  if (noun provides component_parent)
!		return GL__M(##Take,7,noun.component_parent);
	ac_common_ancestor = OIU_CommonAncestor(actor, noun);
	if (ac_common_ancestor == 0) {
		i = ObjectScopedBySomething(noun);
		if (i ~= 0) ac_common_ancestor = CommonAncestor(actor, i);
	} rfalse; ];

[ OIUB_AP i;
	if (noun ~= ac_common_ancestor) {
		i = OIU_Parent(noun);
		while (i~=ac_common_ancestor && i) {
			if (i has animate) return GL__M(##Take,6,i);
			i = OIU_Parent(i);
		}
	}
	rfalse;
];

![ TakeSub_C5;
!  if (ac_common_ancestor == 0) return GL__M(##Take,8,noun); rfalse; ];
[ TakeSub_C6;
	if (ac_common_ancestor == noun) return GL__M(##Take,4,noun); rfalse; ];
[ TakeSub_C7;
	if (noun in actor) return GL__M(##Take,5,noun); rfalse; ];
[ TakeSub_C8 i k;
	i=parent(noun); take_after_recipient = 0;
	if (i && (i ~= ac_common_ancestor) && (i has container || i has supporter))
	{   take_after_recipient=i;
		k=action; action=##LetGo;
		if (RunRoutines(i,before)~=0) { action=k; rtrue; }
		action=k;
	} rfalse; ];
[ TakeSub_C9;
	if (noun has scenery) return GL__M(##Take,10,noun); rfalse; ];
[ TakeSub_C10;
	if (noun has static)  return GL__M(##Take,11,noun); rfalse; ];
[ TakeSub_C11 j k ks;
	if (SACK_OBJECT == nothing || SACK_OBJECT notin actor) rfalse;
	k=0; objectloop (j in actor) if (j hasnt worn) k++;
	if (k >= ValueOrRun(actor,capacity)) {
		j=0;
		objectloop (k in actor) 
			if (k~=SACK_OBJECT && k hasnt worn && k hasnt light) j=k;
		if (j~=0) {
			GL__M(##Take,13,j);
			ks = keep_silent;
			keep_silent = 1; <Insert j SACK_OBJECT>; keep_silent = ks;
			if (j notin SACK_OBJECT) rtrue;
			rfalse;
		}
	} rfalse; ];
[ TakeSub_C12 j k;
	k=0; objectloop (j in actor) if (j hasnt worn) k++;
	if (k >= ValueOrRun(actor,capacity)) return GL__M(##Take,12);
	rfalse; ];
[ TakeSub_O1 rest i;
!  if ((noun provides component_parent) && (rest = (noun.component_parent))) {
!		noun.component_parent = nothing;
!		if (rest provides add_to_scope) {
!			for (i=0: i<(rest.#add_to_scope)/2: i++) {
!			    if ((rest.&add_to_scope)-->i == noun)
!					  (rest.&add_to_scope)-->i = nothing;
!			}
!		}
!  }
!  move noun to actor;
	I7_Move(noun, actor);
	rfalse; ];
[ TakeSub_O2 k;
	if (take_after_recipient) {
		k=action; action=##LetGo;
		if (RunRoutines(take_after_recipient,after)~=0) { action=k; rtrue; }
		action=k;
	} rfalse; ];
[ TakeSub_R1;
	if (actor == player) {
		notheld_mode=onotheld_mode;
		if (notheld_mode==1) { RulebookSucceeds(); rtrue; }
	}
	rfalse; ];
[ TakeSub_R2;
	if (player == actor) return GL__M(##Take, 1);
	print (The) actor, " picks up ", (the) noun, ".^^";
];

[ RemoveSub_C1 i;
	i=parent(noun);
	if (i has container && i hasnt open) return GL__M(##Remove,1,noun);
	rfalse; ];
[ RemoveSub_C2 i;
	i=parent(noun); if (i~=second) return GL__M(##Remove,2,noun);
	rfalse; ];
[ RemoveSub_C3 i;
	i=parent(noun); if (i has animate) return GL__M(##Take,6,i);
	rfalse; ];
[ RemoveSub_C4;
	return GVS_Convert(##Take, noun, 0);
];

[ DropSub_C1;
	if (noun == actor) return GL__M(##PutOn, 4); rfalse; ];
[ DropSub_C2;
	if (noun in parent(actor)) return GL__M(##Drop,1,noun); rfalse; ];
[ DropSub_C3;
	if (noun notin actor) return GL__M(##Drop,2,noun); rfalse; ];
[ DropSub_C4 k;
	if (noun has worn) { GL__M(##Drop,3,noun); say__p=0;
		k = keep_silent; keep_silent = 1; <Disrobe noun>;
		keep_silent = k;
		if (noun has worn && noun in actor) rtrue;
	} rfalse; ];
[ DropSub_C5 p;
	p = parent(actor);
	if (p ofclass K1_room) rfalse;
	if (children(p) < ValueOrRun(p,capacity)) rfalse;
	if (actor ~= player) rtrue;
	print "There is no more room ";
	if (p has supporter) print "on "; else print "in ";
	print (the) p, ".^^"; rtrue; ];

[ DropSub_O1; I7_Move(noun, parent(actor)); give noun ~worn; rfalse; ];
[ DropSub_R1;
	if (player == actor) return GL__M(##Drop,4,noun);
	print (The) actor, " puts down ", (the) noun, ".^^";
];

[ PutOnSub_C1;
	if (second == d_obj || actor in second) return GVS_Convert(##Drop, noun, 0);
	rfalse; ];
[ PutOnSub_C2;
	if (parent(noun)~=actor) return GL__M(##PutOn,1,noun); rfalse; ];
[ PutOnSub_C3;
	if (OIU_Core(noun) == OIU_Core(second)) return GL__M(##PutOn,2,noun);
	ac_common_ancestor = OIU_CommonAncestor(noun, second);
	if (ac_common_ancestor == noun) return GL__M(##PutOn,2,noun); rfalse; ];
[ PutOnSub_C4;
	if (second ~= ac_common_ancestor)
	{   action=##Receive; receive_action=##PutOn;
		if (RunRoutines(second,before)~=0) { action=##PutOn; return; }
		action=##PutOn;
	} rfalse; ];
[ PutOnSub_C5;
	if (second hasnt supporter) return GL__M(##PutOn,3,second); rfalse; ];
[ PutOnSub_C6;
	if (ac_common_ancestor == actor) return GL__M(##PutOn,4); rfalse; ];
[ PutOnSub_C7 k;
	if (noun has worn) { GL__M(##PutOn,5,noun); say__p=0;
		k = keep_silent; keep_silent = 1; <Disrobe noun>; keep_silent = k;
		if (noun has worn) rtrue; } rfalse; ];
[ PutOnSub_C8;
	if (children(second)>=ValueOrRun(second,capacity))
		return GL__M(##PutOn,6,second); rfalse; ];
[ PutOnSub_O1; move noun to second; give noun ~worn; rfalse; ];
[ PutOnSub_O2;
	if (second ~= ac_common_ancestor)
	{   action=##Receive;
		if (RunRoutines(second,after)~=0) { action=##PutOn; return; }
		action=##PutOn;
	} rfalse; ];
[ PutOnSub_R1;
	if (player == actor) {
		if (multiflag==1) return GL__M(##PutOn,7);
		return GL__M(##PutOn,8,noun);
	} else {
		print (The) actor, " puts ", (the) noun, " on ", (the) second, ".^^";
		rtrue;
	}
];

[ InsertSub_C1;
	if (second==d_obj || actor in second) return GVS_Convert(##Drop, noun, 0);; rfalse; ];
[ InsertSub_C2;
	if (parent(noun)~=actor) return GL__M(##Insert,1,noun); rfalse; ];
[ InsertSub_C3;
	if (OIU_Core(noun) == OIU_Core(second)) return GL__M(##Insert, 5, noun);
	ac_common_ancestor = OIU_CommonAncestor(noun, second);
	if (ac_common_ancestor == noun) return GL__M(##Insert, 5, noun); rfalse; ];
[ InsertSub_C4;
	if (second ~= ac_common_ancestor) {
		action=##Receive; receive_action = ##Insert;
		if (RunRoutines(second,before)~=0) { action=##Insert; rtrue; }
		action=##Insert;
	} rfalse; ];
[ InsertSub_C5;
	if (second ~= ac_common_ancestor) {
		if (second has container && second hasnt open)
			return GL__M(##Insert,3,second);
	} rfalse; ];
[ InsertSub_C6;
	if (second hasnt container) return GL__M(##Insert,2,second); rfalse; ];
[ InsertSub_C7 k;
	if (noun has worn) {
		GL__M(##Insert,6,noun);
		say__p=0; k = keep_silent; keep_silent = 1; <Disrobe noun>;
		keep_silent = k; if (noun has worn) rtrue;
	} rfalse; ];
[ InsertSub_C8;
	if (children(second) >= ValueOrRun(second,capacity))
		return GL__M(##Insert,7,second); rfalse; ];
[ InsertSub_O1; move noun to second; give noun ~worn; rfalse; ];
[ InsertSub_O2;
	if (second ~= ac_common_ancestor) {
		action=##Receive;
		if (RunRoutines(second,after)~=0) { action=##Insert; rtrue; }
		action=##Insert;
	} rfalse; ];
[ InsertSub_R1;
	if (actor == player) {
		if (multiflag==1) return GL__M(##Insert,8,noun);
		GL__M(##Insert,9,noun);
	} else {
		print (The) actor, " puts ", (the) noun, " into ", (the) second, ".^^";
	}
	rtrue; ];


[ ScoreSub_O1;
	if (actor ~= player) rfalse;
	#ifdef I7_NOSCORE; "[There is no numerical score.]";
	#ifnot; GL__M(##Score); PrintRank();
	#endif;
];
[ FullScoreSub_O1 i;
	if (actor ~= player) rfalse;
	ScoreSub_O1();
	#ifndef I7_NOSCORE;
	if (score==0 || TASKS_PROVIDED==1) rfalse;
	new_line;
	GL__M(##FullScore,1);

	for (i=0:i<NUMBER_TASKS:i++)
		if (task_done->i==1)
		{   PANum(task_scores->i);
			PrintTaskName(i);
		}
	
	if (things_score~=0)
	{   PANum(things_score); GL__M(##FullScore,2); }
	if (places_score~=0)
	{   PANum(places_score); GL__M(##FullScore,3); }
	new_line; PANum(score); GL__M(##FullScore,4);
	#endif;
];

#ifdef TARGET_ZCODE;

[ QuitSub_O1; if (actor ~= player) rfalse;
	GL__M(##Quit,2); if (YesOrNo()~=0) quit; ];

[ RestartSub_O1;
	if (actor ~= player) rfalse;
	GL__M(##Restart,1);
	if (YesOrNo()~=0) { @restart; GL__M(##Restart,2); }
];

[ RestoreSub_O1;
	if (actor ~= player) rfalse;
	restore Rmaybe;
	return GL__M(##Restore,1);
	.RMaybe; GL__M(##Restore,2);
];

[ SaveSub_O1 flag;
	if (actor ~= player) rfalse;
	#IFV5;
	@save -> flag;
	switch (flag) {
		0: GL__M(##Save,1);
		1: GL__M(##Save,2);
		2: GL__M(##Restore,2);
	}
	#IFNOT;
	save Smaybe;
	return GL__M(##Save,1);
	.SMaybe; GL__M(##Save,2);
	#ENDIF;
];

[ VerifySub_O1;
	if (actor ~= player) rfalse;
	@verify ?Vmaybe;
	jump Vwrong;
	.Vmaybe; return GL__M(##Verify,1);
	.Vwrong;
	GL__M(##Verify,2);
];

[ ScriptOnSub_O1;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode) return GL__M(##ScriptOn,1);
	@output_stream 2;
	if (((0-->8) & 1) == 0) return GL__M(##ScriptOn,3);
	GL__M(##ScriptOn,2); VersionSub();
	transcript_mode = true;
];

[ ScriptOffSub_O1;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode == false) return GL__M(##ScriptOff,1);
	GL__M(##ScriptOff,2);
	@output_stream -2;
	if ((0-->8) & 1) return GL__M(##ScriptOff,3);
	transcript_mode = false;
];

#ifnot; ! TARGET_GLULX

[ QuitSub_O1;
	if (actor ~= player) rfalse;
	GL__M(##Quit, 2); if (YesOrNo()~=0) quit; ];

[ RestartSub_O1;
	if (actor ~= player) rfalse;
	GL__M(##Restart, 1);
	  if (YesOrNo() ~= 0) {
		  @restart;
		  GL__M(##Restart, 2);
	  }
];

[ RestoreSub_O1 res fref;
	if (actor ~= player) rfalse;
	fref = glk($0062, $01, $02, 0); ! fileref_create_by_prompt
	  if (fref == 0) jump RFailed;
	  gg_savestr = glk($0042, fref, $02, GG_SAVESTR_ROCK); ! stream_open_file
	  glk($0063, fref); ! fileref_destroy
	  if (gg_savestr == 0) jump RFailed;
	  @restore gg_savestr res;
	  glk($0044, gg_savestr, 0); ! stream_close
	  gg_savestr = 0;
	.RFailed;
	  GL__M(##Restore, 1);
];

[ SaveSub_O1 res fref;
	if (actor ~= player) rfalse;
	fref = glk($0062, $01, $01, 0); ! fileref_create_by_prompt
	  if (fref == 0) jump SFailed;
	  gg_savestr = glk($0042, fref, $01, GG_SAVESTR_ROCK); ! stream_open_file
	  glk($0063, fref); ! fileref_destroy
	  if (gg_savestr == 0) jump SFailed;
	  @save gg_savestr res;
	  if (res == -1) {
		  ! The player actually just typed "restore". We're going to print
		  !  GL__M(##Restore,2); the Z-Code Inform library does this correctly
		  ! now. But first, we have to recover all the Glk objects; the values
		  ! in our global variables are all wrong.
		  GGRecoverObjects();
		  glk($0044, gg_savestr, 0); ! stream_close
		  gg_savestr = 0;
		  return GL__M(##Restore, 2);
	  }
	  glk($0044, gg_savestr, 0); ! stream_close
	  gg_savestr = 0;
	  if (res == 0) return GL__M(##Save, 2);
	.SFailed;
	  GL__M(##Save, 1);
];

[ VerifySub_O1 res;
	if (actor ~= player) rfalse;
	@verify res;
	  if (res == 0) return GL__M(##Verify, 1);
	  GL__M(##Verify, 2);
];

[ ScriptOnSub_O1;
	if (actor ~= player) rfalse;
	if (gg_scriptstr ~= 0) return GL__M(##ScriptOn, 1);
	  if (gg_scriptfref == 0) {
		  ! fileref_create_by_prompt
		  gg_scriptfref = glk($0062, $102, $05, GG_SCRIPTFREF_ROCK);
		  if (gg_scriptfref == 0) jump S1Failed;
	  }
	  ! stream_open_file
	  gg_scriptstr = glk($0042, gg_scriptfref, $05, GG_SCRIPTSTR_ROCK);
	  if (gg_scriptstr == 0) jump S1Failed;
	  glk($002D, gg_mainwin, gg_scriptstr); ! window_set_echo_stream
	  GL__M(##ScriptOn, 2);
	  VersionSub();
	  return;
	.S1Failed;
	  GL__M(##ScriptOn, 3);
];

[ ScriptOffSub_O1;
	if (actor ~= player) rfalse;
	if (gg_scriptstr == 0) return GL__M(##ScriptOff,1);
	  GL__M(##ScriptOff, 2);
	  glk($0044, gg_scriptstr, 0); ! stream_close
	  gg_scriptstr = 0;
];

#endif; ! TARGET_

[ VersionSub_O1 ix;
	if (actor ~= player) rfalse;
	Banner();
	  #ifdef NI_BUILD_COUNT;
	  print "Identification number: ";
	  for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
	  print "^";
	  #endif; ! NI_BUILD_COUNT
	  #Ifdef TARGET_ZCODE;
	  ix = 0; ! shut up compiler warning
	  if (standard_interpreter > 0) {
		  print "Standard interpreter ", standard_interpreter/256, ".", standard_interpreter%256,
			  " (", HDR_TERPNUMBER->0;
		  #Iftrue (#version_number == 6);
		  print (char) '.', HDR_TERPVERSION->0;
		  #Ifnot;
		  print (char) HDR_TERPVERSION->0;
		  #Endif;
		  print ") / ";
		  }
	  else {
		  print "Interpreter ", HDR_TERPNUMBER->0, " Version ";
		  #Iftrue (#version_number == 6);
		  print HDR_TERPVERSION->0;
		  #Ifnot;
		  print (char) HDR_TERPVERSION->0;
		  #Endif;
		  print " / ";
	  }

	  #Ifnot; ! TARGET_GLULX;
	  @gestalt 1 0 ix;
	  print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
	  ".", ix & $FF, " / ";
	  @gestalt 0 0 ix;
	  print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
	  #Endif; ! TARGET_;
	  print "Library serial number ", (string) LibSerial, "^";
	  #Ifdef LanguageVersion;
	  print (string) LanguageVersion, "^";
	  #Endif; ! LanguageVersion
	  #ifdef I7ExtensionVersions;
	  I7ExtensionVersions();
	  #endif;
];

[ NotifyOnSub_O1;
	if (actor ~= player) rfalse;
	#ifdef I7_NOSCORE; ScoreSub_O1(); #ifnot;
	notify_mode=1; GL__M(##NotifyOn); #endif; ];
[ NotifyOffSub_O1;
	if (actor ~= player) rfalse;
	#ifdef I7_NOSCORE; ScoreSub_O1(); #ifnot;
	notify_mode=0; GL__M(##NotifyOff); #endif; ];
[ LMode1Sub_O1;
	if (actor ~= player) rfalse;
	lookmode=1; print (string) Story; GL__M(##LMode1); ];  ! Brief

[ LMode2Sub_O1;
	if (actor ~= player) rfalse;
	lookmode=2; print (string) Story; GL__M(##LMode2); ];  ! Verbose

[ LMode3Sub_O1;
	if (actor ~= player) rfalse;
	lookmode=3; print (string) Story; GL__M(##LMode3); ];  ! Superbrief
[ PronounsSub_O1 x y c d;
	if (actor ~= player) rfalse;
	GL__M(##Pronouns, 1);

	c = (LanguagePronouns-->0)/3;
	if (player ~= selfobj) c++;

	if (c==0) return GL__M(##Pronouns, 4);

	for (x = 1, d = 0 : x <= LanguagePronouns-->0: x = x+3)
	{   print "~", (address) LanguagePronouns-->x, "~ ";
		y = LanguagePronouns-->(x+2);
		if (y == NULL) GL__M(##Pronouns, 3);
		else { GL__M(##Pronouns, 2); print (the) y; }
		d++;
		if (d < c-1) print ", ";
		if (d == c-1) print (string) AND__TX;
	}
	if (player ~= selfobj)
	{   print "~", (address) ME1__WD, "~ "; GL__M(##Pronouns, 2);
		c = player; player = selfobj;
		print (the) c; player = c;
	}
	".";
];

! End of Verbs.i6
