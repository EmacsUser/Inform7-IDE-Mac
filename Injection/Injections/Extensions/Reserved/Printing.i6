! Printing.i6

[ I7_DefaultPrinter x;
	print x;
];

Global debug_rule_nesting;
[ SetString31 d;
	switch(d) {
		0: string 31 "";
		1: string 31 "    ";
		2: string 31 "		  ";
		3: string 31 "			  ";
		4: string 31 "					";
		default:
		   string 31 "						";
	}
];

[ I7_DivideParagraph; !print "[DP", say__p, say__pc, "]";
	if (say__p) {
		new_line; say__p = 0; say__pc = say__pc | PARA_COMPLETED;
		if (say__pc & PARA_LINEBREAK) say__pc = say__pc - PARA_LINEBREAK;
		if (say__pc & PARA_FORCELINEBREAK)
			say__pc = say__pc - PARA_FORCELINEBREAK;
	}
	!print "[TO", say__p, say__pc, "]";
];

[ I7_RunOnParagraph said;
	say__p = 0; say__pc = say__pc | PARA_LINEBREAK;
	if (said) say__pc = say__pc | PARA_FORCELINEBREAK;
];

[ I7_Prompt i;
	! print "^";
	style roman;
	if ((say__p) ||
		((say__pc & PARA_LINEBREAK) && ((say__pc & PARA_FORCELINEBREAK)==0))) {
		new_line; say__p=0; say__pc = 0;
	}
	switch(metaclass(I7_prompt_text)) {
		String: print (string) I7_prompt_text;
		Routine: I7_prompt_text();
	}
	say__p = 0; say__pc = 0;
	if (I7_box) {
		for (i=0: I7_boxes_appeared-->i: i++)
			if (I7_boxes_appeared-->i == I7_box) {
					I7_box = 0;
					return;
			}
		I7_boxes_appeared-->i = I7_box;
		I7_box();
		I7_box = 0;
		say__p = 0; say__pc = 0;
	}
	I7_enable_rte = true;
];
[ SL_Score_Moves;
	#ifdef I7_NOSCORE; print sline2; #ifnot; print sline1, "/", sline2; #endif;
];
[ SL_Location;
	 if (location == thedark) print (name) location;
	 else
	 {   FindVisibilityLevels();
		 if (visibility_ceiling == location)
			 print (name) location;
		 else print (The) visibility_ceiling;
	 }
];

#Ifdef TARGET_ZCODE;
#IfV5;
#Iftrue (#version_number == 6);

Constant DrawStatusLine_Preempted;

[ DrawStatusLine width x charw scw s spc;
	(0-->8) = (0-->8) &~ $$00000100;
	s = say__p; spc = say__pc;
	BeginActivity(3);
	StatusLineHeight(gg_statuswin_size);
	! Now clear the window. This isn't totally trivial. Our approach is to select the
	! fixed space font, measure its width, and print an appropriate
	! number of spaces. We round up if the screen isn't a whole number
	! of characters wide, and rely on window 1 being set to clip by default.
	MoveCursor(1, 1);
	@set_font 4 -> x;
	width = ScreenWidth();
	spaces width;
	say__p = 0; say__pc = 0;
	if (ForActivity(3) == false) {
	! Back to standard font for the display. We use output_stream 3 to
	! measure the space required, the aim being to get 50 characters
	! worth of space for the location name.
	MoveCursor(1, 2);
	@set_font 1 -> x;
	switch (metaclass(I7_left_sl)) {
		String: print (string) I7_left_sl;
		Routine: I7_left_sl();
	}
	@get_wind_prop 1 3 -> width;
	@get_wind_prop 1 13 -> charw;
	charw = charw & $FF;
	@output_stream 3 StorageForShortName;
	print (I7_string) I7_right_sl;
	@output_stream -3; scw = HDR_PIXELSTO3-->0 + charw;
	x = 1+width-scw;
	@set_cursor 1 x; print (I7_string) I7_right_sl;
	}
	! Reselect roman, as Infocom's interpreters interpreters go funny
	! if reverse is selected twice.
	MainWindow();
	say__p = 0; say__pc = 0;
	EndActivity(3);
	say__p = s; say__pc = spc;
];

#Endif; ! #version_number == 6
#Endif; ! V5
#Endif; ! TARGET_ZCODE

#Ifndef DrawStatusLine_Preempted;
[ DrawStatusLine width posb s spc;
	s = say__p; spc = say__pc;
	BeginActivity(3);
	StatusLineHeight(1); MoveCursor(1, 1); 
	width = ScreenWidth(); posb = width-15;
	spaces width;
	say__p = 0; say__pc = 0;
	if (ForActivity(3) == false) {
		MoveCursor(1, 2);
		switch(metaclass(I7_left_sl)) {
			String: print (string) I7_left_sl;
			Routine: I7_left_sl();
		}
		MoveCursor(1, posb);
		switch(metaclass(I7_right_sl)) {
			String: print (string) I7_right_sl;
			Routine: I7_right_sl();
		}
	}
	MoveCursor(1, 1); MainWindow();
	say__p = 0; say__pc = 0;
	EndActivity(3);
	say__p = s; say__pc = spc;
];
#Endif; ! DrawStatusLine_Preempted

[ I7_say_s; if (say__n ~= 1) print "s"; ];
[ I7_string s; if (s ofclass String) { print (string) s; return; }
	indirect(s);
];
[ I7SwapWF obj lst;
	objectloop (obj ofclass Object) {
		lst = false;
		if (obj has i7listflag) lst = true;
		give obj ~i7listflag;
		if (obj has workflag) give obj i7listflag;
		give obj ~workflag;
		if (lst) give obj workflag;
	}
];
[ I7List supp obj par flag mixed ct defart;
	objectloop (obj ofclass Object && obj has i7listflag) {
		ct++;
		if (flag == false) {
			flag = true; par = parent(obj);
		} else {
			if (parent(obj) ~= par) mixed = true;
		}
	}
	if (ct == 0) { print "nothing"; return; }
	if (supp < 0) { supp = -supp; mixed = true; defart = true; }
	if (supp & ISARE_BIT) {
		if (ct > 1) print "are "; else print "is ";
		supp = supp - ISARE_BIT;
	}
	if ((mixed == false) && (par)) {
		ct = c_style;
		I7SwapWF();
		! print "<";
		WriteListFrom(child(par), ENGLISH_BIT+WORKFLAG_BIT+supp);
		I7SwapWF();
		! print ">";
		c_style = ct;
		return;
	}

	objectloop (obj ofclass Object && obj has i7listflag) {
		give obj ~i7listflag;
		if (supp & DEFART_BIT) {
			if (defart) print (The) obj; else print (the) obj;
			defart = false;
		} else print (a) obj;
		ct--;
#ifdef US_DIALECT;
		if (ct == 1) print ", and ";
#ifnot;
		if (ct == 1) print " and ";
#endif;
		if (ct > 1) print ", ";
 }
! print ">";
];
[ I7WriteListFrom A opt;
	if (opt & EXTRAINDENT_BIT) {
		opt = opt - EXTRAINDENT_BIT;
		if (opt & WORKFLAG_BIT) opt = opt - WORKFLAG_BIT + EXTRA_WORKFLAG_BIT;
		WriteListFrom(A, opt, 1);
	}
	else WriteListFrom(A, opt);
];

[ I7_Locale L T1 T2;
	objectloop (L ofclass Object) give L ~I7_mentioned;
];

! End of Printing.i6
