! Actions.i6

[ _I6_ActionPrimitive;
	#ifdef TARGET_ZCODE;
	indirect(#actions_table-->action);
	#ifnot;
	indirect(#actions_table-->(action+1));
	#endif;
];

[ BeginActionProcessing;
	BeginFollowRulebook();
];
[ EndActionProcessing;
	EndFollowRulebook();
];

[ TestActionBitmap obj act i j k bitmap;
	if (obj == nothing) bitmap = ActionHappened;
	else {
		if (~~(obj provides action_bitmap)) rfalse;
		bitmap = obj.&action_bitmap;
	}
	for (i=0, k=1; i<ActionCount; i++) {
		if (act == ActionCoding-->i) {
			return (((bitmap->j) & k) ~= 0);
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
	rfalse;
];
[ SetActionBitmap obj act i j k bitmap;
	for (i=0, k=1; i<ActionCount; i++) {
		if (act == ActionCoding-->i) {
			if (obj provides action_bitmap) {
				bitmap = obj.&action_bitmap;
				bitmap->0 = (bitmap->0) | 1;
				bitmap->j = (bitmap->j) | k;
			}
			ActionHappened->0 = (ActionHappened->0) | 1;
			ActionHappened->j = (ActionHappened->j) | k;
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
];

Global trace_actions = 0;
[ ActionsOnSub; trace_actions = 1; "Actions listing on."; ];
[ ActionsOffSub; trace_actions = 0; "Actions listing off."; ];
[ ActionPrimitive sa sn rv p1 p2 p3 p4 p5 frame_id; ! 
	sa = action; sn = noun;
	self = noun;

	MStack_CreateRBVars(APROC_RB);

	if ((keep_silent == false) && (multiflag == false)) I7_DivideParagraph();
	I7_action_deciding_rule = 0;

	if (action == ##Consult or ##Ask or ##Tell or ##NotUnderstood or ##Answer) {
		inp2 = 1; second = consult_from + 256*consult_words;
		parsed_number = 100*consult_from + consult_words;
	}

	frame_id = -1;
	p1 = FindAction(action);
	if ((p1) && (ActionData-->(p1+9))) {
		frame_id = ActionData-->(p1+10);
		Mstack_Create_Frame(ActionData-->(p1+9), frame_id);
	}
	if (I7_VerifyNouns()) {
		if ((p1) && (ActionData-->(p1+9)))
			Mstack_Destroy_Frame(frame_id);
		MStack_DestroyRBVars(APROC_RB);
		return;
	}

	ProcessRulebook(SETACTIONVARS_RB);

	#IFDEF DEBUG;
	if ((trace_actions) && (FindAction(-1))) {
		print "["; p1=actor; p2=act_requester; p3=action; p4=noun; p5=second;
		DB_Action(p1,p2,p3,p4,p5);
		print "]^";
	}
	SetString31(++debug_rule_nesting);
	#ENDIF;
	TrackActions();
	BeginActionProcessing();
	if (meta) { _I6_ActionPrimitive(); say__p = 1; }
	else ProcessRulebook(APROC_RB);
	rv = rulechange_stack-->rulechange_sp;
	#IFDEF DEBUG;
	SetString31(--debug_rule_nesting);
	if ((trace_actions) && (FindAction(-1))) {
		print "["; DB_Action(p1,p2,p3,p4,p5); print " - ";
		switch (rv) {
			RS_SUCCEEDS: print "succeeded";
			RS_FAILS: print "failed";
				#IFNDEF I7_ECONOMY;
				if (I7_action_deciding_rule)
					print " the ",
						(I7_RulePrintingRule) I7_action_deciding_rule;
			    #ENDIF;
			default: print "ended without result";
		}
		print "]^";
		rulechange_stack-->rulechange_sp = rv; ! In case disturbed by activities
	}
	#ENDIF;
	if (rv == RS_SUCCEEDS) {
		SetActionBitmap(noun, action);
		if (action == ##Go) SetActionBitmap(location, ##Enter);
	}
	EndActionProcessing();
	if (frame_id ~= -1) Mstack_Destroy_Frame(frame_id);
	MStack_DestroyRBVars(APROC_RB);
	action = sa; noun = sn;
	TrackActions(1);
	if ((keep_silent == false) && (multiflag == false)) I7_DivideParagraph();
	if (rv == RS_SUCCEEDS) rtrue;
	rfalse;
];

[ DA_Name n; print (name) n; ];
[ DA_Topic ignore a b c d i;
	print "~";
	for (a=consult_from:d<consult_words:d++,a++) {
		wn = a; b = WordAddress(a); c = WordLength(a);
		for (i=b:i<b+c:i++) {
			print (char) 0->i;
		}
		if (d<consult_words-1) print " ";
	}
	print "~";
];
[ DA_Number n; print n; ];
[ FindAction fa t;
	if (fa == -1) fa = action;
	t = 1;
	while (t <= ActionData-->0) {
		if (fa == ActionData-->t) return t;
		t = t+11;
	}
	rfalse;
];
[ DB_Action ac acr act n s t l j v c;
	if (debug_rule_nesting > 0) print "(", debug_rule_nesting, ") ";
	if (ac ~= player) {
		if (acr) print "asking ", (the) ac, " to try ";
		else print (the) ac, " trying ";
	}
	t = 1;
	while (t <= ActionData-->0) {
		if (act == ActionData-->t) {
			l = t+9; t = t+4;
			while ((v = ActionData-->t) ~= I6_NULL) {
					if (v ofclass Routine) {
					  if (c==0) { (v)(n); }
					  else { (v)(s); }
					  c++;
					} else print (string) v;
					t++;
					if (t == l) break;
					if (ActionData-->t ~= I6_NULL) print " ";
			}
			if (keep_silent) print " - silently";
			return;
		}
		t = t+11;
	}
];
[ I7_TryAction req by ac n s;
	@push actor; @push act_requester; @push inp1; @push inp2; @push parsed_number;
	actor = by; if (req) act_requester = player; else act_requester = 0;
!  print inp1, inp2, "^";
	by = FindAction(ac);
	if (by) {
		if (ActionData-->(by+2) == I7_OBJECT_TY) inp1 = n;
		else { inp1 = 1; parsed_number = n; }
		if (ActionData-->(by+3) == I7_OBJECT_TY) inp2 = s;
		else { inp2 = 1; parsed_number = s; }
	}
!  print "Made by ITA: ", inp1, inp2, "^";
	InformLibrary.begin_action(ac, n, s);
!  <(ac) n s>;
!  print inp1, inp2, "^";
	@pull parsed_number; @pull inp2; @pull inp1; @pull act_requester; @pull actor;
	TrackActions(1);
];

[ I7_NPCA s;
	if ((actor == player) || (act_requester == nothing)) rfalse;
	s = say__p; say__p = FALSE; ProcessRulebook(PERSUADE_RB);
	if (rulechange_stack-->rulechange_sp ~= RS_SUCCEEDS) {
		if (say__p == FALSE) L__M(##Order, 1, actor);
		RulebookFails(); rtrue;
	}
	say__p = s; rfalse;
];

[ I7_VerifyNouns mask noun_subtype second_subtype at;
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+1); noun_subtype = ActionData-->(at+2);
!print "at = ", at, " nst = ", noun_subtype, "^";
!print "consult_from = ", consult_from, " consult_words = ", consult_from, "^";
!print "inp1 = ", inp1, " noun = ", noun, "^";
!print "inp2 = ", inp2, " second = ", second, "^";
	if (mask & $$100000) { meta = 1; rfalse; }
	second_subtype = ActionData-->(at+3);
!print "sst = ", second_subtype, "^";
	if (noun_subtype == {-value:SNIPPET_TY} or {-value:UNDERSTANDING_TY}) {
	    if (inp1 ~= 1) { inp2 = inp1; second = noun; }
	    parsed_number = 100*consult_from + consult_words;
	    inp1 = 1; noun = consult_from + 256*consult_words;
	}
	if (second_subtype == {-value:SNIPPET_TY} or {-value:UNDERSTANDING_TY}) {
	    parsed_number = 100*consult_from + consult_words;
	    inp2 = 1; second = consult_from + 256*consult_words;
	}
	if (inp1 == 1) {
	    if (noun_subtype == {-value:OBJECT_TY}) {
	        "You must name an object.^"; }
	} else {
	    if (noun_subtype ~= {-value:OBJECT_TY}) {
	        "You may not name an object.^"; }
	    if ((mask & $$01000) && (noun == nothing)) {
	        CarryOutActivity(6); if (noun == nothing) {
	        if (say__p) rtrue;
	        "You must supply a noun.^"; } }
	    if (((mask & $$01000) == 0) && (noun ~= nothing)) {
	        "You may not supply a noun.^"; }
	}
	if (inp2 == 1) {
	    if (second_subtype == {-value:OBJECT_TY}) {
	        "You must name an object.^"; }
	} else {
	    if (second_subtype ~= {-value:OBJECT_TY}) {
	        "You may not name a second object.^"; }
	    if ((mask & $$10000) && (second == nothing)) {
	        CarryOutActivity(7); if (second == nothing) {
	        if (say__p) rtrue;
	        "You must supply a second noun.^"; } }
	    if (((mask & $$10000) == 0) && (second ~= nothing)) {
	        "You may not supply a second noun.^"; }
	}
	rfalse;
];

[ I7_TestActionMask match mask at; 
	at = FindAction(-1); 
	if (at == 0) rfalse; 
	mask = ActionData-->(at+1); 
	if (mask & match) rtrue; 
	rfalse; 
];
[ I7_NeedToCarryNoun; return I7_TestActionMask($$01000000); ];
[ I7_NeedToCarrySecondNoun; return I7_TestActionMask($$10000000); ];
[ I7_NeedToTouchNoun; return I7_TestActionMask($$00001); ];
[ I7_NeedToTouchSecondNoun; return I7_TestActionMask($$00010); ];
[ I7_NeedLightForAction; return I7_TestActionMask($$00100); ];

[ I7_ImplicitTake obj ks;
	ks = keep_silent; keep_silent = true;
	print "(";
	if (actor ~= player) print (the) actor, " ";
	print "first taking ", (the) obj, ")^"; say__p = 0;
	I7_TryAction(true, actor, ##Take, obj, nothing);
	keep_silent = ks;
	if (obj in actor) rtrue;
	rfalse;
];

! The can't see in the dark rule

[ CSITDR; if (location == thedark) { RulebookSucceeds(); rtrue; } rfalse; ];

! The primitive accessibility rule

[ PA_R mask at;
	if (act_requester) rfalse;
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+1);

	! print "actor = ", (the) actor, "inp1 = ", inp1, "; inp2 = ", inp2, "^";
	! print "Mask is ", mask, "^";

	if ((mask & $$00100) &&
		(actor == player) &&
		(ProcessRulebook(VISIBLE_RB)) &&
		((rulechange_stack-->rulechange_sp == RS_SUCCEEDS))) {
		BeginActivity(TOODARK_ACT);
		if (ForActivity(TOODARK_ACT)==false) L__M(##Miscellany, 17);
		EndActivity(TOODARK_ACT);
		I7_action_deciding_rule = CSITDR;
		RulebookFails();
		rtrue;
	}

	if ((mask & $$00001) && noun && (inp1 ~= 1)) {
		if (noun in compass) {
			RulebookFails();
			I7_action_deciding_rule = PA_R; 
			if (actor~=player) rtrue;
			"You must name something more substantial.^";
		}
		if (ObjectIsUntouchable(noun, (actor~=player), FALSE, actor)) {
			RulebookFails();
			I7_action_deciding_rule = PA_R;
			rtrue;
		}
	}

	if ((mask & $$00010) && second && (inp2 ~= 1)) {
		if (second in compass) {
			RulebookFails();
			I7_action_deciding_rule = PA_R;
			if (actor~=player) rtrue;
			"You must name something more substantial.^";
		}
		if (ObjectIsUntouchable(second, (actor~=player), FALSE, actor)) {
			RulebookFails();
			I7_action_deciding_rule = PA_R;
			rtrue;
		}
	}
	rfalse;
];

[ CR_R mask at;
	if (act_requester) rfalse;
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+1);

	if ((mask & $$00001) && noun && (inp1 ~= 1)) {
		if ((mask & $$01000000) && (noun notin actor)) {
			BeginActivity(IMPLICITTAKE_ACT, noun);
            if (ForActivity(IMPLICITTAKE_ACT, noun)==false)
            	I7_ImplicitTake(noun);
            EndActivity(IMPLICITTAKE_ACT, noun);
			if (noun notin actor) {
				RulebookFails();
				I7_action_deciding_rule = CR_R;
				rtrue;
			}
		}
	}

	if ((mask & $$00010) && second && (inp2 ~= 1)) {
		if ((mask & $$10000000) && (second notin actor)) {
			BeginActivity(IMPLICITTAKE_ACT, second);
            if (ForActivity(IMPLICITTAKE_ACT, second)==false)
            	I7_ImplicitTake(second);
            EndActivity(IMPLICITTAKE_ACT, second);
			if (second notin actor) {
				RulebookFails();
				I7_action_deciding_rule = CR_R;
				rtrue;
			}
		}
	}
	rfalse;
];

[ I7_SnippetMatches snip top;
	wn=1;
	if (top == 0) rfalse;
	if (metaclass(top) == Routine) {
		if ((top)(snip/100, snip%100)~=GPR_FAIL) rtrue;
		rfalse;
	}
	RunTimeProblem(RTP_BADTOPIC);
	rfalse;
];

! End of Actions.i6
