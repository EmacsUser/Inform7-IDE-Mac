Version 1/040731 of the Standard Rules by Graham Nelson begins here.

Document ACTIONS at doc58.
Document ACTIVITIES at doc171.
Document ARSUMMARY at doc78.
Document EXTACTIVITIES at doc196.
Document HEADINGS at doc13.
Document KINDS at doc20.
Document KINDSVALUE at doc45.
Document NEWRULEBOOKS at doc160.
Document PHRASES at doc114.
Document ROOMPLAYBEGINS at doc97.
Document act_all at doc183.
Document act_amuse at doc185.
Document act_csl at doc178.
Document act_ds at doc180.
Document act_gt at doc177.
Document act_lc at doc176.
Document act_lni at doc179.
Document act_obit at doc184.
Document act_pn at doc175.
Document act_reading at doc182.
Document act_smn at doc181.
Document kind_backdrop at doc24.
Document kind_device at doc29.
Document kind_door at doc27.
Document kind_person at doc31.
Document kind_player's at doc34.
Document kind_time at doc104.
Document kind_vehicle at doc30.
Document ph_allow at doc167.
Document ph_blankout at doc142.
Document ph_boxed at doc100.
Document ph_carryout at doc196.
Document ph_change at doc79.
Document ph_changep at doc82.
Document ph_changev at doc83.
Document ph_chooserow at doc137.
Document ph_consider at doc165.
Document ph_daemons at doc103.
Document ph_end at doc101.
Document ph_follow at doc160.
Document ph_future at doc109.
Document ph_group at doc176.
Document ph_holder at doc92.
Document ph_if at doc117.
Document ph_ignore at doc163.
Document ph_list at doc123.
Document ph_minspart at doc108.
Document ph_move at doc85.
Document ph_nearest at doc106.
Document ph_numblank at doc142.
Document ph_numrows at doc134.
Document ph_omit at doc175.
Document ph_otherwise at doc120.
Document ph_plus at doc114.
Document ph_random at doc93.
Document ph_remove at doc87.
Document ph_repeat at doc121.
Document ph_result at doc127.
Document ph_runthrough at doc122.
Document ph_say at doc57.
Document ph_sayif at doc43.
Document ph_scope at doc180.
Document ph_sort at doc143.
Document ph_start at doc56.
Document ph_stop at doc60.
Document ph_succeeds at doc164.
Document ph_surrounds at doc81.
Document ph_tabrepeat at doc138.
Document ph_thereis at doc139.
Document ph_timeshift at doc107.
Document ph_try at doc61.
Document ph_types at doc44.
Document ph_while at doc118.
Document ph_yes at doc127.
Document rules_after at doc62.
Document rules_before at doc60.
Document rules_d at doc103.
Document rules_et at doc102.
Document rules_instead at doc59.
Document rules_ri at doc167.
Document rules_wpb at doc97.
Document rules_wpe at doc101.

Use MAX_ARRAYS of 500.
Use MAX_LABELS of 10000.
Use MAX_ZCODE_SIZE of 50000.
Use MAX_STATIC_DATA of 20000.


Part SR1 - Kinds


Section SR1/1 - Primitive Kinds

[The kind "kind" is not created here but by NI itself. The first through
to eighth kinds created now follow: they must not be reordered or moved.]

A room is a kind.
A thing is a kind.
A direction is a kind.
A door is a kind of thing.
A container is a kind of thing.
A supporter is a kind of thing.
A backdrop is a kind of thing.
A person is a kind of thing.


Section SR1/2 - Rooms

The specification of room is "Represents geographical locations, both indoor
and outdoor, which are not necessarily areas in a building. A player in one
room is mostly unable to sense, or interact with, anything in a different room.
Rooms are arranged in a map."

A room is allowed to have a description and a printed name.
A room can be lighted or dark. A room is usually lighted.
A room can be visited or unvisited. A room is usually unvisited.


Section SR1/3 - Things

The specification of thing is "Represents anything interactive in the model
world that is not a room. People, pieces of scenery, furniture, doors and
mislaid umbrellas might all be examples, and so might more surprising things
like the sound of birdsong or a shaft of sunlight."

A thing is allowed to have a description, an initial appearance, a printed
name, an inventory listing and an indefinite article.

A thing can be enterable.

A thing can be lit or unlit. A thing is usually unlit.

A thing can be edible or inedible. A thing is usually inedible.

A thing can be opaque or transparent. A thing is usually opaque.

A thing can be described or undescribed. A thing is usually described.
A thing can be scenery. A thing is usually not scenery.

A thing can be fixed in place or portable. A thing is usually portable.

A thing can be wearable. A thing is usually not wearable.
A thing can be worn. A thing is usually not worn.

A thing can be initially carried.

A thing can be handled.

Something worn is usually wearable and initially carried.

Something initially carried is usually handled.

A thing can be pushable between rooms.

Include (-
  with before [;
      PushDir: if (self has pushable) { AllowPushDir(); rtrue; }
  ],
-) when defining a thing.

A thing can be an Inform library door. A thing can be an Inform library
container. A thing can be an Inform library supporter. A thing can be
Inform library switchable. A thing can be an Inform library animate object.
A thing can be an Inform library male.

A thing can be marked for listing. A thing is usually not marked for listing.

A thing is allowed to have a number called score for finding.


Section SR1/4 - Doors

The specification of door is "Represents a conduit joining two rooms, most
often a door or gate but sometimes a plank bridge, a slide or a hatchway.
Usually visible and operable from both sides (for instance if you write
'The blue door is east of the Ballroom and west of the Garden.'), but
sometimes only one-way (for instance if you write 'East of the Ballroom is
the long slide. Through the long slide is the cellar.')."

A door is always an Inform library door.
A door can be open or closed.
A door is usually closed. A door can be openable.
A door is usually openable.
A door can be lockable. A door is usually not lockable.
A door can be locked or unlocked. A door is usually unlocked.
A door is allowed to have a matching key.
A door is usually fixed in place.
A door is never pushable between rooms.
A door is allowed to have an other side.
A door is allowed to have a description when open.
A door is allowed to have a description when closed.
Through X is Y means that the other side of X is Y.
X is through Y means that the other side of X is Y.


Section SR1/5 - Containers and supporters

The specification of container is "Represents something into which portable
things can be put, such as a teachest or a handbag. Something with a really
large immobile interior, such as the Albert Hall, had better be a room
instead."

A container is always an Inform library container.
A container can be open or closed. A container is usually open.
A container can be openable. A container is usually not openable.
A container can be lockable. A container is usually not lockable.
A container can be locked or unlocked. A container is usually
unlocked. A container is allowed to have a matching key. 
A container is allowed to have a description when open.
A container is allowed to have a description when closed.
A container is allowed to have a number called carrying capacity.

X unlocks Y means that the matching key of Y is X.
X fits the lock of Y means that the matching key of Y is X.

A player's holdall is a kind of container. The specification of
player's holdall is "Represents a container which the player can
carry around as a sort of rucksack, into which spare items are
automatically stowed away."

A player's holdall is always portable. A player's holdall
is usually openable.

Include (-
Global SACK_OBJECT;
Constant RUCKSACK_CLASS = K9_player_s_holdall;
-) before the library.

The specification of supporter is "Represents a surface on which things can be
placed, such as a table."

A supporter is always an Inform library supporter.
A supporter is always transparent.
A supporter is usually fixed in place.
A supporter is allowed to have a number called carrying capacity.


Section SR1/6 - Devices

A device is a kind of thing. A device is always Inform library switchable.
A device can be switched on or switched off. A device is usually switched off.
A device is allowed to have a description when on.
A device is allowed to have a description when off.

The specification of device is "Represents a machine or contrivance of some
kind which can be switched on or off."


Section SR1/7 - Directions

The specification of direction is "Represents a direction of movement, such
as northeast or down. At present Inform 7 does not support the creation
of new directions, but it will do in the final release."

A direction is allowed to have an opposite, an Inform property and an Inform object.

The north is a direction with opposite south, Inform property "n_to" and Inform object "n_obj".
The northeast is a direction with opposite southwest, Inform property "ne_to" and Inform object "ne_obj".
The northwest is a direction with opposite southeast, Inform property "nw_to" and Inform object "nw_obj".
The south is a direction with opposite north, Inform property "s_to" and Inform object "s_obj".
The southeast is a direction with opposite northwest, Inform property "se_to" and Inform object "se_obj".
The southwest is a direction with opposite northeast, Inform property "sw_to" and Inform object "sw_obj".
The east is a direction with opposite west, Inform property "e_to" and Inform object "e_obj".
The west is a direction with opposite east, Inform property "w_to" and Inform object "w_obj".
The up is a direction with opposite down, Inform property "u_to" and Inform object "u_obj".
The down is a direction with opposite up, Inform property "d_to" and Inform object "d_obj".
The inside is a direction with opposite outside, Inform property "in_to" and Inform object "in_obj".
The outside is a direction with opposite inside, Inform property "out_to" and Inform object "out_obj".

Include (- class CompassDirection, -) when defining a direction.
Include (- with name 'n//' 'north' 'wall', door_dir n_to, -) when defining the north.
Include (- with name 'ne' 'northeast' 'wall', door_dir ne_to, -) when defining the northeast.
Include (- with name 'nw' 'northwest' 'wall', door_dir nw_to, -) when defining the northwest.
Include (- with name 's//' 'south' 'wall', door_dir s_to, -) when defining the south.
Include (- with name 'se' 'southeast' 'wall', door_dir se_to, -) when defining the southeast.
Include (- with name 'sw' 'southwest' 'wall', door_dir sw_to, -) when defining the southwest.
Include (- with name 'e//' 'east' 'wall', door_dir e_to, -) when defining the east.
Include (- with name 'w//' 'west' 'wall', door_dir w_to, -) when defining the west.
Include (- with name 'u//' 'up' 'ceiling', door_dir u_to, -) when defining up.
Include (- with name 'd//' 'down' 'floor', door_dir d_to, -) when defining down.
Include (- with name 'in//' 'inside', door_dir in_to, -) when defining inside.
Include (- with name 'out//' 'outside', door_dir out_to, -) when defining outside.

Above means up from.
Above is means up is.
Below means down from.
Below is means down is.


Section SR1/8 - People, men and women

A person is always an Inform library animate object.
A person can be female or male. A person is usually male.

The specification of person is "Despite the name, not necessarily
a human being, but anything animate enough to envisage having a
conversation with, or bartering with."

An animal is a kind of person.
The specification of animal is "Represents an animal, or at any
rate a non-human living creature reasonably large and possible
to interact with: a giant Venus fly-trap might qualify, but not
a patch of lichen."

The plural of man is men. The plural of woman is women.

A man is a kind of person.
The specification of man is "Represents a man, boy or sometimes
an animal which can be referred to as 'him'."
A man is always Inform library male. A man is always male.

A woman is a kind of person. A woman is always female.

The specification of woman is "Represents a woman, girl or sometimes
an animal which can be referred to as 'her'."

A player-character is a kind of person.

The specification of player-character is "Represents a body through
which the game can be played. In most games there is only one of these,
normally called 'yourself'."

A player-character is allowed to have a number called carrying capacity.
The carrying capacity of a player-character is usually 100.
Include (-
  with description
       [;  return L__M(##Miscellany, 19);
       ],
       before NULL, after NULL, life NULL, each_turn NULL,
       time_out NULL, describe NULL,
       parse_name 0,
       orders 0, number 0,
  has  proper transparent,
-) when defining a player-character.

The player is a player-character that varies.

The yourself is an undescribed player-character.
The Inform object of yourself is "selfobj".

The carrying capacity of the player is X means that the carrying
capacity of yourself is X.


Section SR1/9 - Vehicles

A vehicle is a kind of container.
A vehicle is always enterable.
A vehicle is usually not portable.
Include (- with before [; Go: return 1; ], -) when defining a vehicle.


Section SR1/10 - Backdrops

The specification of backdrop is "Represents an aspect of the landscape
or architecture which extends across more than one room: for instance,
a stream, the sky or a long carpet."

A backdrop is usually scenery.
A backdrop is always fixed in place.


Section SR1/11 - Inform 6 equivalents

The description translates into Inform as "description".
Description when open translates into Inform as "when_open".
Description when closed translates into Inform as "when_closed".
Description when on translates into Inform as "when_on".
Description when off translates into Inform as "when_off".
Initial appearance translates into Inform as "initial".
The printed name translates into Inform as "short_name".
Lighted translates into Inform as "light".
Switched on translates into Inform as "on".
Score for visiting translates into Inform as "score".
Score translates into Inform as "score".
Open translates into Inform as "open".
Openable translates into Inform as "openable".
Locked translates into Inform as "locked".
Lockable translates into Inform as "lockable".
The matching key translates into Inform as "with_key".
Transparent translates into Inform as "transparent".
Fixed in place translates into Inform as "static".
Worn translates into Inform as "worn".
Edible translates into Inform as "edible".
Enterable translates into Inform as "enterable".
Undescribed translates into Inform as "concealed".
Scenery translates into Inform as "scenery".
Inform library door translates into Inform as "door".
Inform library supporter translates into Inform as "supporter".
Inform library container translates into Inform as "container".
Wearable translates into Inform as "clothing".
Inform library switchable translates into Inform as "switchable".
The other side translates into Inform as "door_to".
Visited translates into Inform as "visited".
Inform library animate object translates into Inform as "animate".
Inform library male translates into Inform as "male".
Female translates into Inform as "female".
Pushable between rooms translates into Inform as "pushable".
Carrying capacity translates into Inform as "capacity".
Indefinite article translates into Inform as "article".
Inventory listing translates into Inform as "invent".
Initially carried translates into Inform as "initially_carried".
Handled translates into Inform as "moved".
Marked for listing translates into Inform as "workflag".

The noun is an object that varies.
The second noun is an object that varies.
The object in question is an object that varies.
[The item in question is an object that varies.]
The this object is an object that varies.

The location is an object that varies.

The command prompt is a classified that varies.
The left hand status line is a classified that varies.
The right hand status line is a classified that varies.

The score is a number that varies.
The turn count is a number that varies.
The time of day is a time that varies.

The player's command is a snippet that varies.
The matched text is a snippet that varies.


Part SR2 - Rules

Section SR2/1 - Standard Rulebooks

[Do not alter the following list unless matching changes have been
made within the NI compiler.]
Action-processing rules is a rulebook.
Before rules is a rulebook.
Instead rules is a rulebook.
After rules is a rulebook.
Procedural rules is a rulebook.
Accessibility rules is a rulebook.
Action-specific rules is a rulebook.
Carry out rules is a rulebook.
General report rules is a rulebook.
Turn sequence rules is a rulebook.
Reaching inside rules is a parametrised-rulebook.
Reaching outside rules is a parametrised-rulebook.
General before rules is a rulebook.
Actor-specific before rules is a rulebook.
Location-specific before rules is a rulebook.
Reaction before rules is a rulebook.
Object-specific before rules is a rulebook.
General after rules is a rulebook.
Actor-specific after rules is a rulebook.
Location-specific after rules is a rulebook.
Reaction after rules is a rulebook.
Object-specific after rules is a rulebook.
When play begins is a rulebook.
When play ends is a rulebook.
Daemons register is a rulebook.
[From here on they can be meddled with.]

Every turn rules is a rulebook.


Section SR2/2 - Advance of time

The advance time rule corresponds to routine TS1_R.
The timers and daemons rule corresponds to routine TS2_R.
The each turn properties rule corresponds to routine TS3_R.
The time passes rule corresponds to routine TS4_R.
The adjust light rule corresponds to routine TS5_R.
The note object acquisitions rule corresponds to routine TS6_R.
The timed events rule corresponds to routine ProcessI7Timers.

The first turn sequence rule:
	consider the every turn rules;
	consider the daemons register;
	consider the timed events rule.
The advance time rule is listed in the turn sequence rulebook.
The timers and daemons rule is listed in the turn sequence rulebook.
The each turn properties rule is listed in the turn sequence rulebook.
The time passes rule is listed in the turn sequence rulebook.
The last turn sequence rule:
	consider the adjust light rule;
	consider the note object acquisitions rule.

The non-player character action rule corresponds to routine I7_NPCA.


Section SR2/3 - Accessibility of objects

The access to scoped objects rule corresponds to routine OIU_Scoped.
The access through barriers rule corresponds to routine OIU_Barrier.
The can't reach inside closed containers rule corresponds to routine OIUB_CCI.
The can't reach outside closed containers rule corresponds to routine OIUB_CCO.
The can't reach inside rooms rule corresponds to routine OIUB_RI.
The can't take people's possessions rule corresponds to routine OIUB_AP.
The can't take component parts rule corresponds to routine OIUB_CP.

The primitive accessibility rule corresponds to routine PA_R.

The first accessibility rule:
	abide by the access to scoped objects rule.

The last accessibility rule:
	abide by the access through barriers rule.

The last reaching inside rule:
	abide by the can't reach inside rooms rule;
	abide by the can't reach inside closed containers rule;
	abide by the can't take people's possessions rule;
	abide by the can't take component parts rule.

The last reaching outside rule:
	abide by the can't reach outside closed containers rule.


Section SR2/4 - Action processing

The last general before rule: abide by I6 GamePreRoutine.
The last actor-specific before rule: abide by I6 orders property.
The last location-specific before rule: abide by I6 location before.
The last reaction before rule: abide by I6 react_before property.
The last object-specific before rule: abide by I6 object before.

The first general after rule: abide by I6 GamePostRoutine.
[I6 does not have actor-specific afters, asymmetrically.]
The first location-specific after rule: abide by I6 location after.
The first reaction after rule: abide by I6 react_after property.
The first object-specific after rule: abide by I6 object after.

The first action-processing rule:
	abide by the before rules.

The last action-processing rule:
	abide by the primitive accessibility rule;
	abide by the instead rules;
	abide by the non-player character action rule;
	abide by the action-specific rules;
	abide by the carry out rules;
	the rule succeeds.

The last before rule:
	abide by the general before rules;
	abide by the actor-specific before rules;
	abide by the location-specific before rules;
	abide by the reaction before rules;
	abide by the object-specific before rules.

The last carry out rule:
	cause the action to take place.

The first after rule:
	abide by the object-specific after rules;
	abide by the reaction after rules;
	abide by the location-specific after rules;
	abide by the actor-specific after rules;
	abide by the general after rules.


Section SR2/5 - Activity rules

[Activities must not be created until the basic rulebooks are
in place. The order matters too, as these must match constants
defined in the I6 library, so add new ones at the end.]

Printing the name of something documented act_pn is an activity.
Listing contents of something documented act_lc is an activity.
Grouping together something documented act_gt is an activity.
Constructing the status line documented act_csl is an activity.
Listing nondescript items of something documented act_lni is an activity.
Deciding the scope of something documented act_ds is an activity.
Supplying a missing noun documented act_smn is an activity.
Supplying a missing second noun documented act_smn is an activity.
Reading a command documented act_reading is an activity.
Deciding whether all includes something documented act_all is an activity.
Printing the player's obituary documented act_obit is an activity.
Amusing a victorious player documented act_amuse is an activity.


The last for printing the name rule:
	cause the description to take place.
The last for listing contents rule:
	cause the listing to take place.

The print obituary headline rule corresponds to routine OBIT_HEAD.
The print final score rule corresponds to routine OBIT_FINAL.
The display final status line rule corresponds to routine OBIT_DISP.

The last for printing the player's obituary rule:
	abide by the print obituary headline rule;
	abide by the print final score rule;
	abide by the display final status line rule.


Section SR2/6 - Use options

Use American dialect translates as (- Constant DIALECT_US; -).
Use the serial comma translates as (- Constant I7_SERIAL_COMMA; -).
Use memory economy translates as (- Constant I7_ECONOMY; -).


Part SR3 - Actions

Section SR3/1 - Generic action patterns

[Doing something corresponds to action "_Pattern_".
Doing something to corresponds to action "_Pattern_".
Doing something with corresponds to action "_Pattern_".
Doing anything corresponds to action "_Pattern_".
Doing anything to corresponds to action "_Pattern_".
Doing anything with corresponds to action "_Pattern_".]

Section SR3/2 - Actions which move things

Taking inventory is an action corresponding to Inv
	past participle taken,
	applying to nothing
	- check -
	none
	- carry-out -
	default inventory style rule = InvSub_O1
	print empty inventory rule = InvSub_O2
	print standard inventory rule = InvSub_O3
	use inventory to set pronouns rule = InvSub_O4
	- report -
	none.

Taking is an action corresponding to Take
	past participle taken
	applying to one thing
	- check -
	avoid unnecessary implicit taking rule = TakeSub_C1
	can't take yourself rule = TakeSub_C2
	can't take other people rule = TakeSub_C3
	determine common ancestor for taking rule = TakeSub_C4
	can't take from distant locations rule = TakeSub_C5
	can't take what you're inside rule = TakeSub_C6
	can't take what's already taken rule = TakeSub_C7
	check let-go-before rule = TakeSub_C8
	can't take scenery rule = TakeSub_C9
	can't take what's fixed in place rule = TakeSub_C10
	use player's holdall to avoid exceeding carrying capacity rule = TakeSub_C11
	can't exceed carrying capacity rule = TakeSub_C12
	- carry-out -
	standard taking rule = TakeSub_O1
	check let-go-after rule = TakeSub_O2
	- report -
	don't report successful implicit takes rule = TakeSub_R1
	standard report taking rule = TakeSub_R2.

Removing it from is an action corresponding to Remove
	applying to two things
	- check -
	can't remove from closed containers rule = RemoveSub_C1
	can't remove what's not inside rule = RemoveSub_C2
	can't remove from people rule = RemoveSub_C3
	can't take yourself rule = qv
	can't take other people rule = qv
	determine common ancestor for taking rule = qv
	can't take from distant locations rule = qv
	can't take what you're inside rule = qv
	can't take what's already taken rule = qv
	check let-go-before rule = qv
	can't take scenery rule = qv
	can't take what's fixed in place rule = qv
	use player's holdall to avoid exceeding carrying capacity rule = qv
	can't exceed carrying capacity rule = qv
	- carry-out -
	standard taking rule = qv
	check after-rules for taking too rule = RemoveSub_O2
	- report -
	standard report removing rule = RemoveSub_R1.

Dropping is an action corresponding to Drop
	applying to one thing
	- check -
	can't drop yourself rule = DropSub_C1
	can't drop what's already dropped rule = DropSub_C2
	can't drop what's not held rule = DropSub_C3
	can't drop clothes being worn rule = DropSub_C4
	- carry-out -
	standard dropping rule = DropSub_O1
	- report -
	standard report dropping rule = DropSub_R1;

Putting it on is an action corresponding to PutOn
	past participle put
	applying to two things
	- check -
	convert put to drop where possible rule = PutOnSub_C1
	can't put what's not held rule = PutOnSub_C2
	can't put something on itself rule = PutOnSub_C3
	check receive-before for supporter rule = PutOnSub_C4
	can't put onto what's not a supporter rule = PutOnSub_C5
	can't put onto something being carried rule = PutOnSub_C6
	can't put clothes being worn rule = PutOnSub_C7
	can't put if this exceeds carrying capacity rule = PutOnSub_C8
	- carry-out -
	standard putting rule = PutOnSub_O1
	check receive-after for supporter rule = PutOnSub_O2
	- report -
	standard report putting rule = PutOnSub_R1;

Inserting it into is an action corresponding to Insert
	applying to two things
	- check -
	convert insert to drop where possible rule = InsertSub_C1
	can't insert what's not held rule = InsertSub_C2
	can't insert something into itself rule = InsertSub_C3
	check receive-before for container rule = InsertSub_C4
	can't insert into closed containers rule = InsertSub_C5
	can't insert into what's not a container rule = InsertSub_C6
	can't insert clothes being worn rule = InsertSub_C7
	can't insert if this exceeds carrying capacity rule = InsertSub_C8
	- carry-out -
	standard inserting rule = InsertSub_O1
	check receive-after for container rule = InsertSub_O2
	- report -
	standard report inserting rule = InsertSub_R1;


Section SR3/3 - Actions which move the player

Waiting is an action corresponding to Wait
	applying to nothing
	- check -
	none
	- carry-out -
	none
	- report -
	standard report waiting rule = WaitSub_R1.

Going is an action corresponding to Go
	past participle gone
	applying to one visible thing
	- check -
	set up going rule = GoSub_C1
	check to see if in a vehicle rule = GoSub_C2
	can't travel in what's not a vehicle rule = GoSub_C3
	determine direction property rule = GoSub_C4
	determine map connection rule = GoSub_C5
	print textual map connections rule = GoSub_C6
	consult routine map connections rule = GoSub_C7
	can't go that way rule = GoSub_C8
	can't go through concealed doors rule = GoSub_C9
	can't go through closed doors rule = GoSub_C10
	determine what's through door rule = GoSub_C11
	- carry-out -
	move player and vehicle rule = GoSub_O1
	move floating objects rule = GoSub_O2
	check light in new location rule = GoSub_O3
	- report -
	describe room gone into rule = GoSub_R1;

Entering is an action corresponding to Enter
	applying to one thing
	- check -
	convert enter door into go rule = EnterSub_C1
	convert enter compass direction into go rule = EnterSub_C2
	can't enter what's already entered rule = EnterSub_C3
	can't enter what's not enterable rule = EnterSub_C4
	can't enter closed containers rule = EnterSub_C5
	determine common ancestor for entering rule = EnterSub_C6
	can't enter something carried rule = EnterSub_C7
	implicitly pass through other barriers rule = EnterSub_C8
	- carry-out -
	standard entering rule = EnterSub_O1
	- report -
	standard report entering rule = EnterSub_R1
	describe contents entered into rule = EnterSub_R2;

Exiting is an action corresponding to Exit
	applying to nothing
	- check -
	convert exit into go out rule = ExitSub_C1
	can't exit when not inside anything rule = ExitSub_C2
	can't exit closed containers rule = ExitSub_C3
	- carry-out -
	standard exiting rule = ExitSub_O1
	- report -
	standard report exiting rule = ExitSub_R1
	describe room emerged into rule = ExitSub_R2;

Getting off is an action corresponding to GetOff
	past participle got
	applying to one thing
    - check -
    convert get off to exit where possible rule = GetOffSub_C1
    can't get off things rule = GetOffSub_C2
	- carry-out -
	none
 	- report -
	none.


Section SR3/4 - Actions involving sight

Looking is an action corresponding to Look
	applying to nothing
	[requiring light]
	- check -
	none
	- carry-out -
	determine visibility ceiling rule = LookSub_O1
	room description heading rule = LookSub_O2
	room description body text rule = LookSub_O3
	room description paragraphs about objects rule = LookSub_O4
	consult LookRoutine entry point rule = LookSub_O5
	check new arrival rule = LookSub_O6
	- report -
	none.

Examining is an action corresponding to Examine
	applying to one visible thing
	requiring light
	- check -
	none
	- carry-out -
	examine undescribed containers rule = ExamineSub_O1
	examine undescribed devices rule = ExamineSub_O2
	examine undescribed things rule = ExamineSub_O3
	standard examining rule = ExamineSub_O4
	examine described devices rule = ExamineSub_O5
	- report -
	none.

Looking under is an action corresponding to LookUnder
	applying to one visible thing
	requiring light
	- check -
	none
	- carry-out -
	standard looking under rule = LookUnder_O1
	- report -
	none.

Searching is an action corresponding to Search
	applying to one thing
	requiring light
	- check -
	can't search unless container or supporter rule = SearchSub_C1
	can't search closed opaque containers rule = SearchSub_C2
	- carry-out -
	standard searching rule = SearchSub_O1
	- report -
	standard search containers rule = SearchSub_R1
	standard search supporters rule = SearchSub_R2.

Consulting it about is an action corresponding to Consult
	applying to one thing and one topic
	- check -
	none
	- carry-out -
	none
	- report -
	block consulting rule = ConsultSub_C1.


Section SR3/5 - Actions which change the state of things

Locking it with is an action corresponding to Lock
	applying to two things
	- check -
	can't lock without a lock rule = LockSub_C1
	can't lock what's already locked rule = LockSub_C2
	can't lock what's open rule = LockSub_C3
	can't lock without the correct key rule = LockSub_C4
	- carry-out -
	standard locking rule = LockSub_O1
	- report -
	standard report locking rule = LockSub_R1.

Unlocking it with is an action corresponding to Unlock
	applying to two things
	- check -
	can't unlock without a lock rule = UnlockSub_C1
	can't unlock what's already unlocked rule = UnlockSub_C2
	can't unlock without the correct key rule = UnlockSub_C3
	- carry-out -
	standard unlocking rule = UnlockSub_O1
	- report -
	standard report unlocking rule = UnlockSub_R1.

Switching on is an action corresponding to SwitchOn
	applying to one thing
	- check -
	can't switch on unless switchable rule = SwitchOnSub_C1
	can't switch on what's already on rule = SwitchOnSub_C2
	- carry-out -
	standard switching on rule = SwitchOnSub_O1
	- report -
	standard report switching on rule = SwitchOnSub_R1.

Switching off is an action corresponding to SwitchOff
	applying to one thing
	- check -
	can't switch off unless switchable rule = SwitchOffSub_C1
	can't switch off what's already off rule = SwitchOffSub_C2
	- carry-out -
	standard switching off rule = SwitchOffSub_O1
	- report -
	standard report switching off rule = SwitchOffSub_R1.

Opening is an action corresponding to Open
	applying to one thing
	- check -
	can't open unless openable rule = OpenSub_C1
	can't open what's locked rule = OpenSub_C2
	can't open what's already open rule = OpenSub_C3
	- carry-out -
	standard opening rule = OpenSub_O1
	- report -
	reveal any newly visible exterior rule = OpenSub_R1
	standard report opening rule = OpenSub_R2.

Closing is an action corresponding to Close
	applying to one thing
	- check -
	can't close unless openable rule = CloseSub_C1
	can't close what's already closed rule = CloseSub_C2
	- carry-out -
	standard closing rule = CloseSub_O1
	- report -
	standard report closing rule = CloseSub_R1.

Wearing is an action corresponding to Wear
	past participle worn
	applying to one thing
	- check -
	can't wear what's not clothing rule = WearSub_C1
	can't wear what's not held rule = WearSub_C2
	can't wear what's already worn rule = WearSub_C3
	- carry-out -
	standard wearing rule = WearSub_O1
	- report -
	standard report wearing rule = WearSub_R1.

Taking off is an action corresponding to Disrobe
	past participle taken
	applying to one thing
	- check -
	can't take off what's not worn rule = DisrobeSub_C1
	- carry-out -
	standard taking off rule = DisrobeSub_O1
	- report -
	standard report taking off rule = DisrobeSub_R1.

Eating is an action corresponding to Eat
	past participle eaten
	applying to one thing
	- check -
	can't eat unless edible rule = EatSub_C1
	can't eat clothing without removing it first rule = EatSub_C2
	- carry-out -
	standard eating rule = EatSub_O1
	- report -
	standard report eating rule = EatSub_R1.


Section SR3/6 - Actions concerning other people

Giving it to is an action corresponding to Give
	past participle given
	applying to two things
	- check -
	can't give what you haven't got rule = GiveSub_C1
	can't give to yourself rule = GiveSub_C2
	check life property for giving rule = GiveSub_C3
	block giving rule = GiveSub_C4
	- carry-out -
	none
	- report -
	none.

Showing it to is an action corresponding to Show
	past participle shown
	applying to two things
	- check -
	can't show what you haven't got rule = ShowSub_C1
	convert show to yourself to examine rule = ShowSub_C2
	check life property for showing rule = ShowSub_C3
	block showing rule = ShowSub_C4
	- carry-out -
	none
	- report -
	none.

Waking is an action corresponding to WakeOther
	past participle woken
	applying to one thing
	- check -
	check life property for waking rule = WakeOtherSub_C1
	block waking rule = WakeOtherSub_C2
	- carry-out -
	none
	- report -
	none.

Throwing it at is an action corresponding to ThrowAt
	past participle thrown
	applying to two things
	- check -
	check thrown-at rule = ThrowAtSub_C1
	implicitly remove thrown clothing rule = ThrowAtSub_C2
	futile to throw things at inanimate objects rule = ThrowAtSub_C3
	check life property for throwing at rule = ThrowAtSub_C4
	block throwing at rule = ThrowAtSub_C5
	- carry-out -
	none
	- report -
	none.

Attacking is an action corresponding to Attack
	applying to one thing
	- check -
	check life property for attacking rule = AttackSub_C1
	block attacking rule = AttackSub_C2
	- carry-out -
	none
	- report -
	none.

Kissing is an action corresponding to Kiss
	applying to one thing
	- check -
	kissing yourself rule = KissSub_C1
	check life property for kissing rule = KissSub_C2
	block kissing rule = KissSub_C3
	- carry-out -
	none
	- report -
	none.

Answering it that is an action corresponding to Answer
	applying to one thing and one topic
	- check -
	check life property for answering rule = AnswerSub_C1
	- carry-out -
	none
	- report -
	block answering rule = AnswerSub_C2.

Telling it about is an action corresponding to Tell
	past participle told
	applying to one thing and one topic
	- check -
	telling yourself rule = TellSub_C1
	check life property for telling rule = TellSub_C2
	- carry-out -
	none
	- report -
	block telling rule = TellSub_C3.

Asking it about is an action corresponding to Ask
	applying to one thing and one topic
	- check -
	check life property for asking rule = AskSub_C1
	- carry-out -
	none
	- report -
	block asking rule = AskSub_C2.

Asking it for is an action corresponding to AskFor
	applying to two things
	- check -
	asking yourself for something rule = AskForSub_C1
	block asking for rule = AskForSub_C2
	- carry-out -
	none
	- report -
	none.


Section SR3/7 - Actions which are checked but then do nothing unless rules intervene

Touching is an action corresponding to Touch
	applying to one thing
	- check -
	none
	- carry-out -
	none
	- report -
	report touching yourself rule = TouchSub_R1
	report touching other people rule = TouchSub_R2
	report touching things rule = TouchSub_R3.

Waving is an action corresponding to Wave
	applying to one thing
	- check -
	can't wave what's not held rule = WaveSub_C1
	- carry-out -
	none
	- report -
	report waving things rule = WaveSub_R1.

Pulling is an action corresponding to Pull
	applying to one thing
	- check -
	can't pull what's fixed in place rule = PullSub_C1
	can't pull scenery rule = PullSub_C2
	can't pull people rule = PullSub_C3
	- carry-out -
	none
	- report -
	report pulling rule = PullSub_R1.

Pushing is an action corresponding to Push
	applying to one thing
	- check -
	can't push what's fixed in place rule = PushSub_C1
	can't push scenery rule = PushSub_C2
	can't push people rule = PushSub_C3
	- carry-out -
	none
	- report -
	report pushing rule = PushSub_R1.

Turning is an action corresponding to Turn
	applying to one thing
	- check -
	can't turn what's fixed in place rule = TurnSub_C1
	can't turn scenery rule = TurnSub_C2
	can't turn people rule = TurnSub_C3
	- carry-out -
	none
	- report -
	report turning rule = TurnSub_R1.

Pushing it to is an action corresponding to PushDir
	applying to two things
	- check -
	block pushing in directions rule = PushDirSub_C1
	- carry-out -
	none
	- report -
	none.

Squeezing is an action corresponding to Squeeze
	applying to one thing
	- check -
	innuendo about squeezing people rule = SqueezeSub_C1
	- carry-out -
	none
	- report -
	report squeezing rule = SqueezeSub_R1.


Section SR3/8 - Actions which always do nothing unless rules intervene

Saying yes is an action corresponding to Yes
	past participle said
	applying to nothing
	- check -
	block saying yes rule = YesSub_C1
	- carry-out -
	none
	- report -
	none.

Saying no is an action corresponding to No
	past participle said
	applying to nothing
	- check -
	block saying no rule = NoSub_C1
	- carry-out -
	none
	- report -
	none.

Burning is an action corresponding to Burn
	applying to one thing
	- check -
	block burning rule = BurnSub_C1
	- carry-out -
	none
	- report -
	none.

Praying is an action corresponding to Pray
	applying to nothing
	- check -
	block praying rule = PraySub_C1
	- carry-out -
	none
	- report -
	none.

Waking up is an action corresponding to Wake
	past participle woken
	applying to nothing
	- check -
	block waking up rule = WakeSub_C1
	- carry-out -
	none
	- report -
	none.

Thinking is an action corresponding to Think
	past participle thought
	applying to nothing
	- check -
	block thinking rule = ThinkSub_C1
	- carry-out -
	none
	- report -
	none.

Smelling is an action corresponding to Smell
	applying to one thing
	- check -
	block smelling rule = SmellSub_C1
	- carry-out -
	none
	- report -
	none.

Listening to is an action corresponding to Listen
	applying to one thing
	- check -
	block listening rule = ListenSub_C1
	- carry-out -
	none
	- report -
	none.

Tasting is an action corresponding to Taste
	applying to one thing
	- check -
	block tasting rule = TasteSub_C1
	- carry-out -
	none
	- report -
	none.

Digging is an action corresponding to Dig
	past participle dug
	applying to one thing
	- check -
	block digging rule = DigSub_C1
	- carry-out -
	none
	- report -
	none.

Cutting is an action corresponding to Cut
	past participle cut
	applying to one thing
	- check -
	block cutting rule = CutSub_C1
	- carry-out -
	none
	- report -
	none.

Jumping is an action corresponding to Jump
	applying to nothing
	- check -
	block jumping rule = JumpSub_C1
	- carry-out -
	none
	- report -
	none.

Jumping over is an action corresponding to JumpOver
	applying to one thing
	- check -
	block jumping over rule = JumpOverSub_C1
	- carry-out -
	none
	- report -
	none.

Tieing it to is an action corresponding to Tie
	past participle tied
	applying to two things
	- check -
	block tieing rule = TieSub_C1
	- carry-out -
	none
	- report -
	none.

Drinking is an action corresponding to Drink
	past participle drunk
	applying to one thing
	- check -
	block drinking rule = DrinkSub_C1
	- carry-out -
	none
	- report -
	none.

Filling is an action corresponding to Fill
	applying to one thing
	- check -
	block filling rule = FillSub_C1
	- carry-out -
	none
	- report -
	none.

Saying sorry is an action corresponding to Sorry
	past participle said
	applying to nothing
	- check -
	block saying sorry rule = SorrySub_C1
	- carry-out -
	none
	- report -
	none.

Swearing obscenely is an action corresponding to Strong
	censored
	past participle sworn
	applying to nothing
	- check -
	block swearing obscenely rule = StrongSub_C1
	- carry-out -
	none
	- report -
	none.

Swearing mildly is an action corresponding to Mild
	censored
	past participle sworn
	applying to nothing
	- check -
	block swearing mildly rule = MildSub_C1
	- carry-out -
	none
	- report -
	none.

Swimming is an action corresponding to Swim
	past participle swum
	applying to nothing
	- check -
	block swimming rule = SwimSub_C1
	- carry-out -
	none
	- report -
	none.

Swinging is an action corresponding to Swing
	past participle swung
	applying to one thing
	- check -
	block swinging rule = SwingSub_C1
	- carry-out -
	none
	- report -
	none.

Blowing is an action corresponding to Blow
	past participle blown
	applying to one thing
	- check -
	block blowing rule = BlowSub_C1
	- carry-out -
	none
	- report -
	none.

Rubbing is an action corresponding to Rub
	applying to one thing
	- check -
	block rubbing rule = RubSub_C1
	- carry-out -
	none
	- report -
	none.

Setting it to is an action corresponding to SetTo
	past participle set
	applying to one thing and one topic
	- check -
	block setting to rule = SetToSub_C1
	- carry-out -
	none
	- report -
	none.

Waving hands is an action corresponding to WaveHands
	applying to nothing
	- check -
	block waving hands rule = WaveHandsSub_C1
	- carry-out -
	none
	- report -
	none.

Buying is an action corresponding to Buy
	past participle bought
	applying to one thing
	- check -
	block buying rule = BuySub_C1
	- carry-out -
	none
	- report -
	none.

Singing is an action corresponding to Sing
	past participle sung
	applying to nothing
	- check -
	block singing rule = SingSub_C1
	- carry-out -
	none
	- report -
	none.

Climbing is an action corresponding to Climb
	applying to one thing
	- check -
	block climbing rule = ClimbSub_C1
	- carry-out -
	none
	- report -
	none.

Sleeping is an action corresponding to Sleep
	past participle slept
	applying to nothing
	- check -
	block sleeping rule = SleepSub_C1
	- carry-out -
	none
	- report -
	none.

Section SR3/9 - Grammar

Understand "take [things]" as taking.
Understand "take off [something]" as taking off.
Understand "take [things inside] from [something]" as removing it from.
Understand "take [things inside] off [something]" as removing it from.
Understand "take inventory" as taking inventory.
Understand the verbs "carry" and "hold" as "take".

Understand "get out/off/up" as exiting.
Understand "get [things]" as taking.
Understand "get in/into/on/onto [something]" as entering.
Understand "get off [something]" as getting off.
Understand "get [things inside] from [something]" as removing it from.

Understand "pick up [things]" or "pick [things] up" as taking.

Understand "stand" or "stand up" as exiting.
Understand "stand on [something]" as entering.

Understand "remove [something held]" as taking off.
Understand "remove [things]" as taking.
Understand "remove [things inside] from [something]" as removing it from.

Understand "shed [something held]" as taking off.
Understand the verbs "doff" and "disrobe" as "shed".

Understand "wear [something held]" as wearing.
Understand the verb "don" as "wear".

Understand "put [other things] in/inside/into [something]" as inserting it into.
Understand "put [other things] on/onto [something]" as putting it on.
Understand "put on [something held]" as wearing.
Understand "put down [things held]" or "put [things held] down" as dropping.

Understand "insert [other things] in/into [something]" as inserting it into.

Understand "drop [things held]" as dropping.
Understand "drop [other things] in/into/down [something]" as inserting it into.
Understand "drop [other things] on/onto [something]" as putting it on.
Understand "drop [something held] at/against/on/onto [something]" as throwing it at.
Understand the verbs "throw" and "discard" as "drop".

Understand "give [something held] to [someone]" or "give [someone]
[something held]" as giving it to.
Understand the verbs "pay" and "offer" and "feed" as "give".

Understand "show [someone] [something held]" or "show [something held] to
[someone]" as showing it to.
Understand the verbs "present" and "display" as "show".

Understand "go" as going.
Understand "go [direction]" as going.
Understand "go [something]" as entering.
Understand "go into/in/inside/through [something]" as entering.
Understand the verbs "walk", "leave" and "run" as "go".

Understand "inventory" as taking inventory.
Understand the verbs "i" and "inv" as "inventory".

Understand "look" as looking.
Understand "look at [something]" as examining.
Understand "look inside/in/into/through [something]" as searching.
Understand "look under [something]" as looking under.
Understand "look up [text] in [something]" as consulting it about reversed.
Understand the verb "l" as "look".

Understand "consult [something] on/about [text]" as consulting it about.

Understand "open [something]" as opening.
Understand "open [something] with [something held]" as unlocking it with.
Understand the verbs "unwrap", "uncover" as "open".

Understand "close [something]" as closing.
Understand "close up [something]" as closing.
Understand "close off [something]" as switching off.
Understand the verbs "shut" and "cover" as "close".

Understand "enter [something]" as entering.
Understand the verb "cross" as "enter".

Understand "sit on top of [something]" as entering.
Understand "sit on/in/inside [something]" as entering.

Understand "exit" as exiting.
Understand the verb "out" as "exit".

Understand "examine [something]" as examining.
Understand the verbs "x", "watch", "describe" and "check" as "examine".

Understand "read [something]" as examining.
Understand "read about [text] in [something]" as consulting it about reversed.
Understand "read [text] in [something]" as consulting it about reversed.

Understand "yes" as saying yes.
Understand the verb "y" as "yes".

Understand "no" as saying no.

Understand "sorry" as saying sorry.

Understand "shit" as swearing obscenely.
Understand the verbs "fuck" and "damn" as "shit".

Understand "bother" as swearing mildly.
Understand the verbs "curses", "drat" and "darn" as "bother".

Understand "search [something]" as searching.

Understand "wave" as waving hands.

Understand "wave [something]" as waving.

Understand "set [something] to [text]" as setting it to.
Understand the verb "adjust" as "set".

Understand "pull [something]" as pulling.
Understand the verb "drag" as "pull".

Understand "push [something]" as pushing.
Understand "push [something] [direction]" or "push [something]
to [direction]" as pushing it to.
Understand the verbs "move", "shift", "clear" and "press" as "push".

Understand "turn [something]" as turning.
Understand "turn [something] on" or "turn on [something]" as switching on.
Understand "turn [something] off" or "turn off [something]" as switching off.
Understand the verbs "rotate", "twist", "unscrew" and "screw" as "turn".

Understand "switch [something]" or "switch [something] on" as switching on.
Understand "switch [something] off" or "switch off [something]" as switching off.

Understand "lock [something] with [something held]" as locking it with.

Understand "unlock [something] with [something held]" as unlocking it with.

Understand "attack [something]" as attacking.
Understand the verbs "break", "smash", "hit", "fight", "torture", "wreck",
"crack", "destroy", "murder", "kill", "punch" and "thump" as "attack".

Understand "wait" as waiting.
Understand the verb "z" as "wait".

Understand "answer [text] to [someone]" as answering it that reversed.
Understand the verbs "say", "shout" and "speak" as "answer".

Understand "tell [someone] about [text]" as telling it about.

Understand "ask [someone] about [text]" as asking it about.
Understand "ask [someone] for [something]" as asking it for.

Understand "eat [something held]" as eating.

Understand "sleep" as sleeping.
Understand the verb "nap" as "sleep".

Understand "sing" as singing.

Understand "climb [something]" or "climb up/over [something]" as climbing.
Understand the verb "scale" as "climb".

Understand "buy [something]" as buying.
Understand the verb "purchase" as "buy".

Understand "squeeze [something]" as squeezing.
Understand the verb "squash" as "squeeze".

Understand "swim" as swimming.
Understand the verb "dive" as "swim".

Understand "swing [something]" or "swing on [something]" as swinging.

Understand "blow [something held]" as blowing.

Understand "pray" as praying.

Understand "wake" or "wake up" as waking up.
Understand "wake [someone]" or "wake [someone] up" or "wake up [someone]"
as waking.
Understand the verbs "awake" and "awaken" as "wake".

Understand "kiss [someone]" as kissing.
Understand the verbs "embrace" and "hug" as "kiss".

Understand "think" as thinking.

Understand "smell" as smelling.
Understand "smell [something]" as smelling.
Understand the verb "sniff" as "smell".

Understand "listen" as listening.
Understand "hear [something]" as listening.
Understand "listen to [something]" as listening.

Rule for supplying a missing noun while smelling (this is the ambient
odour rule): change the noun to the location. Rule for supplying a
missing noun while listening (this is the ambient sound rule): change
the noun to the location. Rule for supplying a missing noun while
going (this is the block vaguely going rule): say "You'll have to say
which compass direction to go in."

Understand "taste [something]" as tasting.

Understand "touch [something]" as touching.
Understand the verb "feel" as "touch".

Understand "rub [something]" as rubbing.
Understand the verbs "shine", "polish", "sweep", "clean", "dust", "wipe"
and "scrub" as "rub".

Understand "tie [something] to [something]" as tieing it to.
Understand the verbs "attach", "fix" and "fasten" as "tie".

Understand "burn [something]" as burning.
Understand the verb "light" as "burn".

Understand "drink [something]" as drinking.
Understand the verbs "swallow" and "sip" as "drink".

Understand "fill [something]" as filling.

Understand "cut [something]" as cutting.
Understand the verbs "slice", "prune" and "chop" as "cut".

Understand "jump" as jumping.
Understand "jump over [something]" as jumping over.
Understand the verbs "skip" and "hop" as "jump".

Understand "dig [something]" as digging.


Part SR4 - Phrasebook

Section SR4/0 - Saying

To say (something - string-of-text) documented ph_say:
	(- print (string) {something}; -).
To say (something - number):
	(- print (say__n={something}); -).
To say s: (- I7_say_s(); -).
To say (something - time):
	(- print (PrintTimeOfDay) {something}; -).
To say (something - time) in words:
	(- print (PrintTimeOfDayEnglish) {something}; -).
To say (something - snippet):
	(- print (PrintSnippet) {something}; -).
To say (something - number) in words:
	(- print (number) {something}; -).
To say the (something - number) in words:
	(- print (number) {something}; -).
To say (something - object):
	(- print (name) {something}; -).
To say a (something - object):
	(- print (a) {something}; -).
To say an (something - object):
	(- print (a) {something}; -).
To say the (something - object):
	(- print (the) {something}; -).
To say The (something - object):
	(- print (The) {something}; -).
To say the player's surroundings documented ph_surrounds:
	(- SL_Location(); -).
To say list of extension credits:
	(- I7ExtensionVersions(); -).
To say if (c - condition) documented ph_sayif:
	(- {/} 
.{L#}; if ({c}) say__c=true; else jump {L##}; -).
To say end if:
	(- {/} 
.{L#}; say__c = false; -).
To say otherwise:
	(- {/}
.{L#}; if (say__c==false) say__c=true; else jump {L##}; -).
To say line break:
	(- if (say__p) new_line; say__p = 0; -).
To say paragraph break:
	(- if (say__p) new_line; new_line; say__p = 0; -).

Section SR4/1 - The score and the outcome

To start the player in (somewhere - a room) documented ph_start:
	(- location={somewhere}; -).
To start the player at (somewhere - a room):
	(- location={somewhere}; -).
To change the player to (O - a player-character):
	(- ChangePlayer({O}); -).
To award (some - number) point:
	(- score=score+{some}; -).
To award (some - number) points:
	(- score=score+{some}; -).
To end the game in death documented ph_end:
	(- deadflag=1; -).
To end the game in victory:
	(- deadflag=2; -).
To end the game saying (finale - text):
	(- deadflag={finale}; -).
To resume the game:
	(- deadflag=0; -).

Section SR4/2 - Causing and responding to actions

To try (doing something - action) documented ph_try:
	(- {doing something}; -).
To silently try (doing something - action):
	(- keep_silent=1;{doing something};keep_silent=0; -).
To try silently (doing something - action):
	(- keep_silent=1;{doing something};keep_silent=0; -).

To stop the action documented ph_stop:
	(- rtrue; -) - outcome.
To continue the action:
	(- rfalse; -) - outcome.

To carry out the (A - activity) activity documented ph_carryout:
	(- CarryOutActivity({A}); -).
To begin the (A - activity) activity:
	(- BeginActivity({A}); -).
To decide whether the (A - activity) is required:
	(- (~~(ForActivity({A}))) -).
To end the (A - activity) activity:
	(- EndActivity({A}); -).
To carry out the (A - activity) activity with (O - object):
	(- CarryOutActivity({A}, {O}); -).
To begin the (A - activity) activity with (O - object):
	(- BeginActivity({A}, {O}); -).
To decide whether the (A - activity) with (O - object) is required:
	(- (~~(ForActivity({A}, {O}))) -).
To end the (A - activity) activity with (O - object):
	(- EndActivity({A}, {O}); -).
To decide whether the (A - activity) activity is going on:
	(- (TestActivity({A})) -).

To do nothing:
	(- ; -).
To it does:
	(- RulebookSucceeds(); rtrue; -).
To it does not:
	(- RulebookFails(); rtrue; -).

Section SR4/3 - Moving and removing things

To remove (something - a thing) from play documented ph_remove:
	(- remove {something}; -).
To move (something - a thing) to (something else - object),
	without printing a room description
	or printing an abbreviated room description documented ph_move:
	(- I7_Move({something}, {something else}, {phrase options}); -).

To decide which thing is holder of (something - object) documented ph_holder:
	(- (parent({something})) -).
To decide which thing is next thing held after (something - object):
	(- (sibling({something})) -).
To decide which thing is first thing held by (something - object):
	(- (child({something})) -).

To decide whether in (somewhere - a room):
	(- (real_location=={somewhere}) -).
To decide whether in darkness:
	(- (location==thedark) -).
To decide whether the player is wearing (something - wearable):
	(- ({something} has worn) -).


Section SR4/4 - Arithmetic and comparing numbers

To decide which number is (X - number) + (Y - number) documented ph_plus: (- ({X}+{Y}) -).
To decide which number is (X - number) - (Y - number): (- ({X}-{Y}) -).
To decide which number is (X - number) * (Y - number): (- ({X}*{Y}) -).
To decide which number is (X - number) / (Y - number): (- ({X}/{Y}) -).

To decide whether (X - number) < (Y - number): (- ({X}<{Y}) -).
To decide whether (X - number) <= (Y - number): (- ({X}<={Y}) -).
To decide whether (X - number) > (Y - number): (- ({X}>{Y}) -).
To decide whether (X - number) >= (Y - number): (- ({X}>={Y}) -).


Section SR4/5 - Time

To decide which time is (t - time) to the nearest (t2 - time) documented ph_nearest:
	(- (RoundOffTime({t},{t2})) -).
To decide which number is the minutes part of (t - time) documented ph_minspart:
	(- ({t}%60) -).
To decide which number is the hours part of (t - time):
	(- ({t}/60) -).
To decide if (t - time) is before (t2 - time):
	(- ((({t}+20*60)%(60*24))<(({t2}+20*60)%(60*24))) -).
To decide if (t - time) is after (t2 - time):
	(- ((({t}+20*60)%(60*24))>(({t2}+20*60)%(60*24))) -).
To decide if it is before (t2 - time):
	(- (((the_time+20*60)%(60*24))<(({t2}+20*60)%(60*24))) -).
To decide if it is after (t2 - time):
	(- (((the_time+20*60)%(60*24))>(({t2}+20*60)%(60*24))) -).
To decide which time is (t - time) before (t2 - time) documented ph_timeshift:
	(- (({t2}-{t}+60*24)%(60*24)) -).
To decide which time is (t - time) after (t2 - time):
	(- (({t2}+{t}+60*24)%(60*24)) -).
To decide which time is (n - number) minutes:
	(- (({n})%(60*24)) -).
To decide which time is (n - number) hours:
	(- (({n}*60)%(60*24)) -).
To (R - rule) in (t - number) turn from now documented ph_future:
	(- SetI7Timer({R}, {t}+1, 0); -).
To (R - rule) in (t - number) turns from now:
	(- SetI7Timer({R}, {t}+1, 0); -).
To (R - rule) at (t - time):
	(- SetI7Timer({R}, {t}, 1); -).
To (R - rule) in (t - time) from now:
	(- SetI7Timer({R}, (the_time+{t})%(60*24), 1); -).


Section SR4/6 - Randomness

To decide which number is a random number from (N - number) to (M - number) documented ph_random:
	(- (random(({M})-({N})+1)+({N})-1) -).
To decide whether a random chance of (N - number) in (M - number) succeeds:
	(- (random({M}) <= {N}) -).


Section SR4/7 - Tables

To decide which number is number of rows in (T - table-name) documented ph_numrows:
	(- TableRows({T}) -).
To decide which number is number of blank rows in (T - table-name) documented ph_numblank:
	(- TableBlankRows({T}) -).
To decide which number is number of filled rows in (T - table-name):
	(- TableFilledRows({T}) -).
To decide if there is (TR - table-reference) documented ph_thereis:
	(- (Exists{TR}) -).
To decide if there is no (TR - table-reference):
	(- (Exists{TR} == false) -).
To change (tr - table-reference) to (w - value):
	(- {tr}{-},1,{w}); -).
To delete (tr - table-reference) documented ph_blankout:
	(- {tr}{-},1,I7_TABLE_NOVALUE); -).
To blank out the whole row documented ph_blankout:
	(- {+}TableBlankOutRow(ct_0, ct_1); -).
To choose row (N - number) in (T - table-name) documented ph_chooserow:
	(- {+}ct_0 = {T}; ct_1 = {N}; -).
To choose row with (TC - table-column) of (w - value) in (T - table-name):
	(- {+}ct_0 = {T}; ct_1 = TableRowCorr(ct_0, {TC}, {w}); -).
To choose a blank row in (T - table-name):
	(- {+}ct_0 = {T}; ct_1 = TableBlankRow(ct_0); -).
To choose a random row in (T - table-name):
	(- {+}ct_0 = {T}; ct_1 = TableRandomRow(ct_0); -).

Section SR4/7 - Searching and sorting tables

To repeat through (T - table-name) begin * documented ph_tabrepeat:
	(- {+}ct_0 = {T}; for (ct_1=1:ct_1<=TableRows(ct_0):ct_1++) if (TableRowIsBlank(ct_0,ct_1)==false)  -).
To repeat through (T - table-name) in reverse order begin *:
	(- {+}ct_0 = {T}; for (ct_1=TableRows(ct_0):ct_1>=1:ct_1--) if (TableRowIsBlank(ct_0,ct_1)==false)  -).
To repeat through (T - table-name) in (TC - table-column) order begin *:
	(- {+}ct_0 = {T}; for (ct_1=TableNextRow(ct_0,{TC},0,1):ct_1~=0:ct_1=TableNextRow(ct_0,{TC},ct_1,1))  -).
To repeat through (T - table-name) in reverse (TC - table-column) order begin *:
	(- {+}ct_0 = {T}; for (ct_1=TableNextRow(ct_0,{TC},0,-1):ct_1~=0:ct_1=TableNextRow(ct_0,{TC},ct_1,-1))  -).
To sort (T - table-name) in random order documented ph_sort:
    (- TableShuffle({T}); -).
To sort (T - table-name) in (TC - table-column) order:
	(- TableSort({T}, {TC}, 1); -).
To sort (T - table-name) in reverse (TC - table-column) order:
	(- TableSort({T}, {TC}, -1); -).


Section SR4/8 - Changing properties and variables

To let (n - number variable) be (m - number):
	(- {n} = {m}; -). 
To let (n - time variable) be (m - time):
	(- {n} = {m}; -). 
To let (o - string-of-text variable) be (p - string-of-text):
	(- {o} = {p}; -). 
To let (r - object variable) be (s - object):
	(- {r} = {s}; -). 
To let (k - classified variable) be (l - classified):
	(- {k} = {l}; -). 
To let (t - existing variable) be (u - value):
	(- {t} = {u}; -).
To change (p - property) to (w - value) documented ph_changev:
	(- Write{p}{-},{w}); -).
To change (gv - global variable) to (w - value) documented ph_change:
	(- {gv} = {w}; -).
To change (o - object) to (p - property) documented ph_changep:
	(- if (PermitAttribute(true, {o}, {p})) give {o} {p}; -).
To change (o - object) to (w - value):
	(- WriteAccessProp({o},{*w},{w}); -).
To decide if (o - object) has a (p - property):
	(- ({o} provides {p}) -).
To decide if (o - object) has an (p - property):
	(- ({o} provides {p}) -).


Section SR4/9 - Listing things in a given place

To list the contents of (O - an object),
	with newlines,
	indented,
	giving inventory information,
	as a sentence,
	including contents,
	including all contents, 
	tersely,
	giving brief inventory information,
	using the definite article,
	listing marked items only,
	prefacing with is/are
	and/or not listing concealed items documented ph_list:
	(- WriteListFrom(child({O}), {phrase options}); -).
[To do style the list,
	with newlines,
	indented,
	giving inventory information,
	as a sentence,
	including contents,
	including all contents, 
	tersely,
	giving brief inventory information,
	using the definite article,
	listing marked items only,
	prefacing with is/are
	and/or not listing concealed items:
	(- c_style = c_style | {phrase options}; -).
To do not style the list,
	with newlines,
	indented,
	giving inventory information,
	as a sentence,
	including contents,
	including all contents, 
	tersely,
	giving brief inventory information,
	using the definite article,
	listing marked items only,
	prefacing with is/are
	and/or not listing concealed items:
	(- c_style = c_style & (~ {phrase options}); -).]
To say contents of (O - an object):
	list the contents of O, as a sentence.
To say the contents of (O - an object):
	list the contents of O, as a sentence, using the definite article.
To group (OS - object-specification) together documented ph_group:
	(- objectloop (say__c provides list_together) if ({OS}) 
		say__c.list_together = {_LT}; -).
To group (OS - object-specification) together as (T - text):
	(- objectloop (say__c provides list_together) if ({OS}) 
		say__c.list_together = {T}; -).
To omit contents in listing documented ph_omit:
	(- c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT); -).
To place (O - an object) in scope, but not its contents documented ph_scope:
	(- I7_PlaceInScope({O}, {phrase options}); -).


Section SR4/9a - The player's command

To decide if (S - a snippet) matches (T - a topic) documented act_reading:
	(- (wn=1,{T}({S}/100,{S}%100)~=GPR_FAIL) -).
To decide if (S - a snippet) does not match (T - a topic) documented act_reading:
	(- (wn=1,{T}({S}/100,{S}%100)==GPR_FAIL) -).
To decide if (S - a snippet) includes (T - a topic):
	(- (I7_match_snippet=I7_Match({T},{S})) -).
To decide if (S - a snippet) does not include (T - a topic):
	(- (I7_Match({T},{S})==0) -).
To replace (S - a snippet) with (T - text):
	(- SpliceSnippet({S}, {T}); -).
To cut (S - a snippet):
	(- SpliceSnippet({S}, 0); -).
To reject the player's command:
	(- RulebookFails(); rtrue; -).


Section SR4/10 - Loops and conditionals

To if (c - condition) then (ph - phrase) documented ph_if:
	(- if {c} {ph} -).
To if (c - condition) , (ph - phrase):
	(- if {c} {ph} -).
To otherwise (ph - phrase) documented ph_otherwise:
	(- else {ph} -).
To if (c - condition) begin *:
	(- if {c}  -).
To while (c - condition) repeatedly (ph - phrase) documented ph_while:
	(- while {c} {ph} -).
To while (c - condition) , (ph - phrase):
	(- while {c} {ph} -).
To while (c - condition) begin *:
	(- while {c}  -).
To repeat with (loopvar - number variable)
	running from (v - number) to (w - number) begin * documented ph_repeat:
		(- for ({loopvar}={v}: {loopvar}<={w}: {loopvar}++)  -).
To repeat with (loopvar - object variable)
	running through (c - condition) begin * +1 documented ph_runthrough:
		(- for ({loopvar}={c}, {loopvar+}={loopvar}, {loopvar+}={\c}: {loopvar}: {loopvar}={loopvar+}, {loopvar+}={\c})  -).
To issue the error (message - text):
	(- print ">--> ", (string) {message}, "^^"; rtrue; -).
To stop:
	(- return; -) - void.
To yes documented ph_yes:
	(- rtrue; -) - condition.
To no:
	(- rfalse; -) - condition.
To result (something - returned) documented ph_result:
	(- return {something}; -) - value.


Section SR4/11 - Accessibility

To decide whether (o - object) is inaccessible, saying if not:
	(- (ObjectIsUntouchable({o}, ~~({saying if not}))) -).
To allow access documented ph_allow:
	(- RulebookSucceeds(); rtrue; -).
To deny access:
	(- RulebookFails(); rtrue; -).


Section SR4/12 - Daemons

To start (RL - a rule) documented ph_daemons:
	(- SetDaemonRule({RL},1); -).
To stop (RL - a rule):
	(- SetDaemonRule({RL},0); -).


Section SR4/13 - Fonts and visual effects

To say bold type documented ph_types:
	(- style bold; -).
To say italic type:
	(- style underline; -).
To say roman type:
	(- style roman; -).
To say fixed letter spacing:
	(- font off; -).
To say variable letter spacing:
	(- font on; -).
To display the boxed quotation (Q - boxed-quotation) documented ph_boxed:
	(- I7_box = {Q}; -).


Section SR4/14 - Following rules

To follow (RL - a rule) documented ph_follow:
	(- FollowRulebook({RL}); -).
To consider (RL - a rule) documented ph_consider:
	(- ProcessRulebook({RL}); -).
To abide by (RL - a rule):
	(- if (ProcessRulebook({RL})) rtrue; -).
To follow (RL - a rule) for (O - object):
	(- FollowRulebook({RL}, {O}); -).
To consider (RL - a rule) for (O - object):
	(- ProcessRulebook({RL}, {O}); -).
To abide by (RL - a rule) for (O - object):
	(- if (ProcessRulebook({RL}, {O})) rtrue; -).


Section SR4/15 - Success and failure of rules

To make no decision: (- rfalse; -).
To the rule succeeds documented ph_succeeds:
	(- RulebookSucceeds(); rtrue; -).
To the rule fails:
	(- RulebookFails(); rtrue; -).
To the rule succeeds with result (O - a classified):
	(- RulebookSucceeds(true,{O}); rtrue; -).
To the rule fails with result (O - a classified):
	(- RulebookFails(true,{O}); rtrue; -).
To decide if the rule succeeded:
	(- (rulechange_stack-->rulechange_sp == RS_SUCCEEDS) -).
To decide if the rule succeeded with result (O - classified):
	(- ((rulechange_stack-->rulechange_sp == RS_SUCCEEDS)
		&& (rulechange_stack-->(rulechange_sp+1) == true)
		&& (rulechange_stack-->(rulechange_sp+2) == {O})) -).
To decide if the rule failed:
	(- (rulechange_stack-->rulechange_sp == RS_FAILS) -).
To decide if the rule failed with result (O - classified):
	(- ((rulechange_stack-->rulechange_sp == RS_FAILS)
		&& (rulechange_stack-->(rulechange_sp+1) == true)
		&& (rulechange_stack-->(rulechange_sp+2) == {O})) -).
To decide which classified is the result of the rule:
	(- (ResultOfRule()) -).

Section SR4/16 - Procedural manipulation of rules

To ignore (RL - a rule) documented ph_ignore:
	(- SuppressRule({RL}); -).
To reinstate (RL - a rule):
	(- ReinstateRule({RL}); -).
To reject the result of (RL - a rule):
	(- DonotuseRule({RL}); -).
To accept the result of (RL - a rule):
	(- DonotuseRule({RL}); -).
To substitute (RL1 - a rule) for (RL2 - a rule):
	(- SubstituteRule({RL1},{RL2}); -).
To restore the original (RL1 - a rule):
	(- SubstituteRule({RL1},{RL1}); -).
To move (RL1 - a rule) to before (RL2 - a rule):
	(- MoveRuleBefore({RL1},{RL2}); -).
To move (RL1 - a rule) to after (RL2 - a rule):
	(- MoveRuleAfter({RL1},{RL2}); -).



Section SR4/17 - Unindexed

To abide by I6 GamePreRoutine:
	(- if (GamePreRoutine()~=0) rtrue; -).
To abide by I6 orders property:
	(- if (RunRoutines(player,orders)~=0) rtrue; -).
To abide by I6 location before:
	(- if (location~=0 && RunRoutines(location,before)~=0) rtrue; -).
To abide by I6 react_before property:
	(- scope_reason=REACT_BEFORE_REASON; parser_one=0;SearchScope(ScopeCeiling(player),player,0); scope_reason=PARSING_REASON; if (parser_one~=0) rtrue; -).
To abide by I6 object before:
	(- if (inp1>1 && RunRoutines(inp1,before)~=0) rtrue; -).

To abide by I6 GamePostRoutine:
	(- if (GamePostRoutine()~=0) rtrue; -).
To abide by I6 location after:
	(- if (location~=0 && RunRoutines(location,after)~=0) rtrue; -).
To abide by I6 react_after property:
	(- scope_reason=REACT_AFTER_REASON; parser_one=0;SearchScope(ScopeCeiling(player),player,0); scope_reason=PARSING_REASON; if (parser_one~=0) rtrue; -).
To abide by I6 object after:
	(- if (inp1>1 && RunRoutines(inp1,after)~=0) rtrue; -).

To cause the action to take place:
	(- _I6_ActionPrimitive(); rtrue; -).

To cause the description to take place:
	(- I6_PSN__(parameter_object); -).
To cause the listing to take place:
	(- I7_WLF(child(parameter_object), 0); -).


Part SR5 - Bibliographic data

The story title, the story author and the story genre are text variables.
The release number is a number variable.


The Standard Rules end here.
